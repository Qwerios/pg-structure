{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to pg-structure pg-structure is a Node.js library to get structure of a PostgreSQL database automatically as a detailed object. Tested Every part of the library is tested. Documented Everything is documented, no hidden features. Utilitarian Beyond database objects (i.e. many to many relation , description data ). pg-structure examines given PostgreSQL database by reverse engineering and lets you easily code, analyze, operate on PostgreSQL database structure by providing details about DB , Schema , Table , Column , Constraint , Relation and Index . Created object can be used to auto generate documentation or ORM models from database. It is much easier to work with JS object than working manually with database. Example var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password'}, ['public', 'other_schema']) .then((db) = { console.log( db.get('public.account').columns.get('is_active').type ); }) .catch(err = console.log(err.stack)); Detailed Example var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then((db) = { // Basic var tables = db.schemas.get('public').tables; // Map of Table objects. // List of table names for (let table of tables.values()) { console.log(table.name); } // Long chain example for: // public schema - cart table - contact_id column - foreign key constraints of contact_id. var constraints = db.get('public.cart.contact_id').foreignKeyConstraints; var sameName = db.schemas.get('public').tables.get('cart').columns.get('contact_id').foreignKeyConstraints; // Many to many relation. Returns cart_line_item for cart -- cart_line_item -- product var joinTable = [...db.get('public.cart').m2mRelations.values()][0].joinTable; // See JS Map on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map }) .catch(err = console.log(err.stack)); Load Save Example You can save reverse engineered database for later to load. If you use .zip extension, pg-structure automatically compresses file as zip file. var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then(db = pgStructure.save('./db.zip', db)) .catch(err = console.log(err.stack)); ... Later, you can load pg-structure. Loading is 10 times faster than reverse engineering database. var pgStructure = require('pg-structure'); pgStructure.load('./db.zip') .then(db = console.log(db.schemas.get('public').name)) .catch(err = console.log(err.stack)); Caveat : pgStructure cannot load files saved by incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database and create a new save file. Features Fully tested Fully documented with JSDOC and HTML Supports load, save, serialize, deserialize, toString, parse. All PostgreSQL data types including array, JSON and HSTore Support composite keys (Multiple field keys) Schema support Constraints (Primary Key, Foreign Key, Unique). Supports multi-column constraints. Identifies one to many (hasMany) relationships. Identifies reverse of one to many (belongsTo) relationships Identifies all possible many to many (belongs to many has many through) relationships Objects can be accessed by name or by order. (Uses Map to save order and allow named access.) Objects can be iterated via callbacks. Allows to store and extract JSON data from Database objects. (See Description Data in concepts .) Very detailed column meta data: Allow null Description Auto Increment onUpdate onDelete etc. (Full details can be found in Column doc) Support for: DB Schema Table Column Constraint Index Relation Custom Data Type Where to Start? First have look at concepts to understand a few key points. You may want to read examples to see how pg-structure can be used. To start coding read main pg-structure module's documentation. During development API references helps you. Special Thanks Documentation is auto generated thanks to: MkDocs using a theme provided by Read the Docs . Markdown is generated by jsdoc-to-markdown Contributions For contribution please send pull requests with tests on GitHub . Send bugs and feature requests to GitHub Issues . Thanks for Contributions PhilWaldmann ShaunParsons cyberinferno viniciuspinto","title":"Home"},{"location":"#welcome-to-pg-structure","text":"pg-structure is a Node.js library to get structure of a PostgreSQL database automatically as a detailed object. Tested Every part of the library is tested. Documented Everything is documented, no hidden features. Utilitarian Beyond database objects (i.e. many to many relation , description data ). pg-structure examines given PostgreSQL database by reverse engineering and lets you easily code, analyze, operate on PostgreSQL database structure by providing details about DB , Schema , Table , Column , Constraint , Relation and Index . Created object can be used to auto generate documentation or ORM models from database. It is much easier to work with JS object than working manually with database.","title":"Welcome to pg-structure"},{"location":"#example","text":"var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password'}, ['public', 'other_schema']) .then((db) = { console.log( db.get('public.account').columns.get('is_active').type ); }) .catch(err = console.log(err.stack));","title":"Example"},{"location":"#detailed-example","text":"var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then((db) = { // Basic var tables = db.schemas.get('public').tables; // Map of Table objects. // List of table names for (let table of tables.values()) { console.log(table.name); } // Long chain example for: // public schema - cart table - contact_id column - foreign key constraints of contact_id. var constraints = db.get('public.cart.contact_id').foreignKeyConstraints; var sameName = db.schemas.get('public').tables.get('cart').columns.get('contact_id').foreignKeyConstraints; // Many to many relation. Returns cart_line_item for cart -- cart_line_item -- product var joinTable = [...db.get('public.cart').m2mRelations.values()][0].joinTable; // See JS Map on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map }) .catch(err = console.log(err.stack));","title":"Detailed Example"},{"location":"#load-save-example","text":"You can save reverse engineered database for later to load. If you use .zip extension, pg-structure automatically compresses file as zip file. var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then(db = pgStructure.save('./db.zip', db)) .catch(err = console.log(err.stack)); ... Later, you can load pg-structure. Loading is 10 times faster than reverse engineering database. var pgStructure = require('pg-structure'); pgStructure.load('./db.zip') .then(db = console.log(db.schemas.get('public').name)) .catch(err = console.log(err.stack)); Caveat : pgStructure cannot load files saved by incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database and create a new save file.","title":"Load &amp; Save Example"},{"location":"#features","text":"Fully tested Fully documented with JSDOC and HTML Supports load, save, serialize, deserialize, toString, parse. All PostgreSQL data types including array, JSON and HSTore Support composite keys (Multiple field keys) Schema support Constraints (Primary Key, Foreign Key, Unique). Supports multi-column constraints. Identifies one to many (hasMany) relationships. Identifies reverse of one to many (belongsTo) relationships Identifies all possible many to many (belongs to many has many through) relationships Objects can be accessed by name or by order. (Uses Map to save order and allow named access.) Objects can be iterated via callbacks. Allows to store and extract JSON data from Database objects. (See Description Data in concepts .) Very detailed column meta data: Allow null Description Auto Increment onUpdate onDelete etc. (Full details can be found in Column doc) Support for: DB Schema Table Column Constraint Index Relation Custom Data Type","title":"Features"},{"location":"#where-to-start","text":"First have look at concepts to understand a few key points. You may want to read examples to see how pg-structure can be used. To start coding read main pg-structure module's documentation. During development API references helps you.","title":"Where to Start?"},{"location":"#special-thanks","text":"Documentation is auto generated thanks to: MkDocs using a theme provided by Read the Docs . Markdown is generated by jsdoc-to-markdown","title":"Special Thanks"},{"location":"#contributions","text":"For contribution please send pull requests with tests on GitHub . Send bugs and feature requests to GitHub Issues .","title":"Contributions"},{"location":"#thanks-for-contributions","text":"PhilWaldmann ShaunParsons cyberinferno viniciuspinto","title":"Thanks for Contributions"},{"location":"concepts/","text":"Database Objects vs. pg-structure Objects In this documentation database objects means database parts provided by PostgreSQL such as table, column, constraint etc. Sometimes those objects are simply refereed as database as a general term in this documentation. pg-structure objects means object instances provided by pg-structure classes. Objects (Instances) In pg-structure database objects such as Schema, Column etc. are represented by JavaScript objects such as Schema , Column etc. pgStructure(connectionArgs, schemas).then((db) = { // db is an DB object. }); Attributes pg-structure objects attributes are designed to be read only. They access various database objects' details. Attributes are read only and formed as nouns . Unlike previous versions of pg-structure , current version does not enforce read only behaviour for the sake of new performance oriented design. Singular named attributes such as table#name contains single data which is a simple JavaScript type. Plural named attributes such as table#columns contains array of related objects. Plural named attributes with suffix ByName such as table#columnsByName contains a simple object as key/value pairs. Keys are object's names, values are related objects. Methods pg-structure also provides methods to access database details. Methods are named as verbs like Table#getPrimaryKeys or Table#columnExists . get shortcut DB , schema , table classes provide get method for a shortcut. This method may be used to save a few key strokes. For example all below are equal: var userColumn = db.get('public.account.user_name'); var sameColumn = db.getSchema('public').getTable('account').getColumn('user_name'); var againSameColumn = db.schemasByName.public.tablesByName.account.columnsByName.user_name; console.log(userColumn === sameColumn); // true Relation Classes vs. Foreign Key Constraint pg-structure Foreign Key Constraint objects represent directly PostgreSQL foreign key constraints. Developers and ORM users need to have more information about relations than present in foreign key constraints. For example many to many relationships and many to one relationships are not available in database engine. pg-structure provides O2MRelation , M2MRelation and M2ORelation classes to answer those needs. Description Data / Comment Data PostgreSQL objects holds free form text in their description. pg-structure offers some help to store extra data in database objects' description as JSON. pg-structure automatically parses JSON data between [pg-structure] and [/pg-structure] tags. Tags are case-insensitive. Only one pg-structure object is processed per description. For maximum comfort JSON parsing is made by jsonic . It is a non-strict JSON parser. You don't need to quote property names: { foo:\"bar baz\", red:255 } You don't need the top level braces: foo:\"bar baz\", red:255 You don't need to quote strings with spaces: foo:bar baz, red:255 You do need to quote strings if they contain a comma or closing brace or square bracket: icky:\",}]\" You can use single quotes for strings: Jules:'Cry \"Havoc,\" and let slip the dogs of war!' You can have trailing commas: foo:bar, red:255, For details, please see jsonic . // For example: 'This constraint connects account table to contact // table. [pg-structure]{ hasMany: primaryContacts, belongsTo: primaryAccount, free: 3 }[/pg-structure]' let description = constraint.description; // - 'This constraint connects account table to contact table.' (Tags and JSON data are replaced from description.) let data = constraint.descriptionData; // - { hasMany: 'primaryContacts', belongsTo: 'primaryAccount', free: 3 } console.log(constraint.descriptionData.hasMany); // - primaryContacts","title":"Concepts"},{"location":"concepts/#database-objects-vs-pg-structure-objects","text":"In this documentation database objects means database parts provided by PostgreSQL such as table, column, constraint etc. Sometimes those objects are simply refereed as database as a general term in this documentation. pg-structure objects means object instances provided by pg-structure classes.","title":"Database Objects vs. pg-structure Objects"},{"location":"concepts/#objects-instances","text":"In pg-structure database objects such as Schema, Column etc. are represented by JavaScript objects such as Schema , Column etc. pgStructure(connectionArgs, schemas).then((db) = { // db is an DB object. });","title":"Objects (Instances)"},{"location":"concepts/#attributes","text":"pg-structure objects attributes are designed to be read only. They access various database objects' details. Attributes are read only and formed as nouns . Unlike previous versions of pg-structure , current version does not enforce read only behaviour for the sake of new performance oriented design. Singular named attributes such as table#name contains single data which is a simple JavaScript type. Plural named attributes such as table#columns contains array of related objects. Plural named attributes with suffix ByName such as table#columnsByName contains a simple object as key/value pairs. Keys are object's names, values are related objects.","title":"Attributes"},{"location":"concepts/#methods","text":"pg-structure also provides methods to access database details. Methods are named as verbs like Table#getPrimaryKeys or Table#columnExists .","title":"Methods"},{"location":"concepts/#get-shortcut","text":"DB , schema , table classes provide get method for a shortcut. This method may be used to save a few key strokes. For example all below are equal: var userColumn = db.get('public.account.user_name'); var sameColumn = db.getSchema('public').getTable('account').getColumn('user_name'); var againSameColumn = db.schemasByName.public.tablesByName.account.columnsByName.user_name; console.log(userColumn === sameColumn); // true","title":"get shortcut"},{"location":"concepts/#relation-classes-vs-foreign-key-constraint","text":"pg-structure Foreign Key Constraint objects represent directly PostgreSQL foreign key constraints. Developers and ORM users need to have more information about relations than present in foreign key constraints. For example many to many relationships and many to one relationships are not available in database engine. pg-structure provides O2MRelation , M2MRelation and M2ORelation classes to answer those needs.","title":"Relation Classes vs. Foreign Key Constraint"},{"location":"concepts/#description-data-comment-data","text":"PostgreSQL objects holds free form text in their description. pg-structure offers some help to store extra data in database objects' description as JSON. pg-structure automatically parses JSON data between [pg-structure] and [/pg-structure] tags. Tags are case-insensitive. Only one pg-structure object is processed per description. For maximum comfort JSON parsing is made by jsonic . It is a non-strict JSON parser. You don't need to quote property names: { foo:\"bar baz\", red:255 } You don't need the top level braces: foo:\"bar baz\", red:255 You don't need to quote strings with spaces: foo:bar baz, red:255 You do need to quote strings if they contain a comma or closing brace or square bracket: icky:\",}]\" You can use single quotes for strings: Jules:'Cry \"Havoc,\" and let slip the dogs of war!' You can have trailing commas: foo:bar, red:255, For details, please see jsonic . // For example: 'This constraint connects account table to contact // table. [pg-structure]{ hasMany: primaryContacts, belongsTo: primaryAccount, free: 3 }[/pg-structure]' let description = constraint.description; // - 'This constraint connects account table to contact table.' (Tags and JSON data are replaced from description.) let data = constraint.descriptionData; // - { hasMany: 'primaryContacts', belongsTo: 'primaryAccount', free: 3 } console.log(constraint.descriptionData.hasMany); // - primaryContacts","title":"Description Data / Comment Data"},{"location":"examples/","text":"Database Schema Examples are based on a sample database schema above. Examples Get Tables as a {@link Map} var tablesArray = db.get('public').tables; // Map { size = Table {}, color = Table {}, line_item = Table {} ... } Get Columns var columnsArray = [...db.get('public.product').columns.values()]; // [ id {}, name {}, color_id {} ... ] for (let column of db.get('public.product').columns.values()) { console.log(column.name); } Get Primary Keys var pkArray = db.get('public.product').primaryKeyColumns; // Map { ... } Get Foreign Key Columns To get all foreign key columns of all foreign key constraints in a table: var fkMap = db.get('public.product').foreignKeyColumns; // Map { color_id = Column {}, vendor_id = Column {} } To get foreign key columns of a specific constraint: var fkMap = db.get('public.product').foreignKeyConstraints.get('vendor_has_products').columns; // Map { vendor_id = Column {} } One to Many Relation var relation = [...product.o2mRelations.values()][0]; // RELATION: product --- line_item var constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts var sourceTable = relation.sourceTable; // TABLE: product var targetTable = relation.targetTable; // TABLE: line_item var FKColumn = [...relation.constraint.columns.values()][0]; // COLUMN: product_id (from line_item table) var sourcePKColumn = [...relation.sourceTable.primaryKeys.values()][0]; // COLUMN: id (from product table) Many to Many Relation var relation = [...product.m2mRelations.values()][0]; // RELATION: product --- line_item --- cart var sourceConstraint = relation.sourceConstraint; // CONSTRAINT: ^-- product_has_carts var targetConstraint = relation.targetConstraint; // CONSTRAINT: cart_has_products --^ var sourceTable = relation.sourceTable; // TABLE: product var targetTable = relation.targetTable; // TABLE: cart var sourceJoinFKColumn = [...relation.sourceConstraint.columns.values()][0]; // COLUMN: product_id (from line_item table) var targetJoinFKColumn = [...relation.targetConstraint.columns.values()][0]; // COLUMN: cart_id (from line_item table) var sourcePKColumn = [...relation.sourceTable.primaryKeys.values()][0]; // COLUMN: id (from product table) var targetPKColumn = [...relation.targetTable.primaryKeys.values()][0]; // COLUMN: id (from cart table) Many to One Relation var relation = [...line_item.m2oRelations.values()][0]; // RELATION: line_item ---- product var constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts var sourceTable = relation.sourceTable; // TABLE: line_item var targetTable = relation.targetTable; // TABLE: product var FKColumn = [...relation.constraint.columns.values()][0]; // COLUMN: product_id (from line_item table) var PKColumn = [...relation.targetTable.primaryKeys.values()][0]; // COLUMN: id (from product table)","title":"Examples"},{"location":"examples/#database-schema","text":"Examples are based on a sample database schema above.","title":"Database Schema"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#get-tables-as-a-link-map","text":"var tablesArray = db.get('public').tables; // Map { size = Table {}, color = Table {}, line_item = Table {} ... }","title":"Get Tables as a {@link Map}"},{"location":"examples/#get-columns","text":"var columnsArray = [...db.get('public.product').columns.values()]; // [ id {}, name {}, color_id {} ... ] for (let column of db.get('public.product').columns.values()) { console.log(column.name); }","title":"Get Columns"},{"location":"examples/#get-primary-keys","text":"var pkArray = db.get('public.product').primaryKeyColumns; // Map { ... }","title":"Get Primary Keys"},{"location":"examples/#get-foreign-key-columns","text":"To get all foreign key columns of all foreign key constraints in a table: var fkMap = db.get('public.product').foreignKeyColumns; // Map { color_id = Column {}, vendor_id = Column {} } To get foreign key columns of a specific constraint: var fkMap = db.get('public.product').foreignKeyConstraints.get('vendor_has_products').columns; // Map { vendor_id = Column {} }","title":"Get Foreign Key Columns"},{"location":"examples/#one-to-many-relation","text":"var relation = [...product.o2mRelations.values()][0]; // RELATION: product --- line_item var constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts var sourceTable = relation.sourceTable; // TABLE: product var targetTable = relation.targetTable; // TABLE: line_item var FKColumn = [...relation.constraint.columns.values()][0]; // COLUMN: product_id (from line_item table) var sourcePKColumn = [...relation.sourceTable.primaryKeys.values()][0]; // COLUMN: id (from product table)","title":"One to Many Relation"},{"location":"examples/#many-to-many-relation","text":"var relation = [...product.m2mRelations.values()][0]; // RELATION: product --- line_item --- cart var sourceConstraint = relation.sourceConstraint; // CONSTRAINT: ^-- product_has_carts var targetConstraint = relation.targetConstraint; // CONSTRAINT: cart_has_products --^ var sourceTable = relation.sourceTable; // TABLE: product var targetTable = relation.targetTable; // TABLE: cart var sourceJoinFKColumn = [...relation.sourceConstraint.columns.values()][0]; // COLUMN: product_id (from line_item table) var targetJoinFKColumn = [...relation.targetConstraint.columns.values()][0]; // COLUMN: cart_id (from line_item table) var sourcePKColumn = [...relation.sourceTable.primaryKeys.values()][0]; // COLUMN: id (from product table) var targetPKColumn = [...relation.targetTable.primaryKeys.values()][0]; // COLUMN: id (from cart table)","title":"Many to Many Relation"},{"location":"examples/#many-to-one-relation","text":"var relation = [...line_item.m2oRelations.values()][0]; // RELATION: line_item ---- product var constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts var sourceTable = relation.sourceTable; // TABLE: line_item var targetTable = relation.targetTable; // TABLE: product var FKColumn = [...relation.constraint.columns.values()][0]; // COLUMN: product_id (from line_item table) var PKColumn = [...relation.targetTable.primaryKeys.values()][0]; // COLUMN: id (from product table)","title":"Many to One Relation"},{"location":"history/","text":"Note : Version history for minimal documentation updates are not listed here to prevent cluttering. History Release Notes 4.2 / 2018-11-28 Added: schema/type ( PhilWaldmann ) 4.0.0 / 2017-05-30 Added: pg-structure throws exception when a non-existing schema requested. Added: Table#kind to determine whether a table is a view or table. Added: Schema#description and Schema#comment attributes to get schema comments. 3.5.14 / 2017-03-06 Fixed: If same constraint name is used more than once in same schema (non-unique constraint name), pg-structure was failing. 3.5.11 / 2017-02-21 Fixed: Column.default() was returning typecast if default value is ''. 3.5.0 / 2016-05-04 Added: Relation naming support for CamelCase tables. Fixed: Default strategy for Many to Many ( m2m ) and Many to One ( m2o ) relations are selected as 'simple' even 'simple' strategy causes conflict. Now complex is selected when there are conflicts between cross types of o2m and m2m . Added: Relation naming documentation. Added: Naming strategy test. 3.4.0 Changed: table#descriptionData tag is changed from [JSON] to [pg-structure] (EXPERIMENTAL) Added: o2mRelation#generateName() , m2oRelation#generateName() , m2mRelation#generateName() . Those methods are highly experimental and may be changed or deleted. 3.3.2 / 2016-02-25 Fixed: Tables without primary key was throwing exception for table#primaryKeyColumns . Fixed: table#hasManyTables and table#belongsToTables were returning array instead of Set. 3.3.0 / 2016-02-24 Added: table#descriptionData , table#commentData , column#descriptionData , column#commentData , constraint#descriptionData , constraint#commentData . It is possible to store and access JSON in objects' description. 3.2.0 / 2016-02-24 Added: constraint#description , constraint#comment . Updated: Test ERD corrected. 3.1.1 / 2016-01-30 Added: column#referencedColumns . 3.1.0 / 2016-01-26 Added: #array method is added all Map types to help building arrays in non supporting environments such as nunjucks. 3.0.0 / 2016-01-16 Previous versions of pg-structure are designed to be a build time tool. v3 are designed to be a runtime tool. It is refactored to better performance compared to previous versions. Internal storage is completely rewritten. Loki DB is excellent product, but it is overkill for this project. pg-structure now uses direct object references for speed up things. DB interaction is reduced from 9 SQL queries to 3. Those 3 queries are same queries from previous version. So work of other 6 queries are done by Javascript now. Breaking Change: Column#foreignKeyConstraint is changed to Column#foreignKeyConstraints , Column#referencedColumn is removed, because same column may be part of multiple different foreign key constraints which results in referencing different columns in different tables at the same time. Breaking Change: All ...ByName such as Table#columnsByName methods are removed, and collections such as Table#columns return Map instead of array or object. Maps return values in order like arrays and they can be queried with .has method like objects. Breaking Change: Column#uniqueIndexesNoPK is renamed as Column#uniqueIndexesNoPk . Added: Optional Lazy loading, cache of lazy loaded parts, invalidation logic of cache. Added: pgStructure.serialize and pgStructure.deserialize methods. Added: pgStructure.save and pgStructure.load methods. Load is 10 times faster than querying database. Added: Column#domainSchema Added: Constraint#matchOption , Constraint#referencedColumnsBy Added: Table#belongsToManyTablesPk , Table#m2mRelationsPk Doc updates and changes. 2.0.8 / 2015-12-09 Added: Table#description and Table#comment attributes added to the table object. Fixed: Table sql was returning null for table descriptions. 2.0.5 / 2015-12-08 Changed: Code and API cleanup and simplification since alpha releases. Changed: Array and collection object returning attributes now return empty array or empty object if no result found. Previously they returned null. They are usually used in loops, and this change helps getting rid of null checks. Removed: All methods which are duplicate of attributes. They cause duplicated code and don't add any useful contribution. Same can be achieved using attributes with foreach and better can be achieved with for..of. 2.0.0-alpha.9 / 2015-11-29 Fixed: One to many and many to one relations duplicates. 2.0.0-alpha.8 / 2015-11-29 Fixed: Join tables with more than one relations produce warning about non-unique constraint. Fixed: referencedTable returns undefined. Fixed: Example on README throws exception. Typo corrected. Catch part added. Added: New tests for fixed bugs. 2.0.0-alpha.5 / 2015-11-19 Added: Table#relations and Table#getRelations(). 2.0.0-alpha.3 / 2015-11-19 Fixed: Broken links in documentation. 2.0.0-alpha.2 / 2015-11-17 Added: Index class is added. Fixed: Column#unique was assuming that a column can have only one unique constraint. Now it returns array. Fixed: Column#unique was ignoring unique indexes Now it considers unique indexes too. Fixed: Many typos in constraint class documentation. 2.0.0-alpha.1 / 2015-11-11 BREAKING CHANGES Completely rewritten. Methods are converted to read only attributes. New methods are named as verb such as getColumn(). New classes added: Relation, O2MRelation (one to many), M2ORelation (many to one), M2M Relation (many to many). Constraint features that are technically not available in DB Engine moved from Constraint class to related Relation classes. Documentation updated completely and added clearer examples. Some method names and attributes are more intuitive than previous version. Why v2 has incompatible changes? Version 2 is designed to be more elegant and more intuitive. Methods are changed to read only attributes and new methods are easily distinguished from attributes with verb based names such as columns vs getColumns() . Additionally new Relation classes are added. Some of the features are moved from Constraint to Relation , because some features are technically not available in DB Engine and those features misrepresent Constraint . For example many to many relations are virtual relationships which do not actually exist in database. They are tables joined via a third join table. 1.11.1 / 2015-06-16 Added: JSONB support. Contributed by: viniciuspinto (https://github.com/viniciuspinto) 1.11.0 / 2014-12-30 Added: Constraint.throughForeignKeyConstraintToSelf() method added. Added: Winston logging. Fixed: Many to Many relations has name collisions if join table connects more than one table and one of the tables has more than one connection to join table. Naming of many to many relations changed. 1.10.0 / 2014-12-23 Added: db.includedSchemas method to get list of requested schemas to be parsed. Added: db.schemaIncluded method to determine if given schema name is one of the requested schemas to be parsed. Fix: If a table has a reference to not included schema, throws exception. Should not include its foreign key. Doc update. 1.9.0 / 2014-12-12 Added: table.hasManyThrough.throughForeignKeyConstraint method added to constraint class. 1.8.3 / 2014-12-10 Fix: Sequelize type length, precision. 1.8.2 / 2014-12-10 Fix: Sequelize type date, time etc. has no length property. Fix: Sequelize type dateonly added. Tests added. 1.8.0 / 2014-12-10 Added: Shortcut function 'get' added to db, schema and table classes. Fix: hasManyThrough does not return foreign keys. 1.7.0 / 2014-12-10 Added: onDelete and onUpdate added to hasMany and hasManyThrough relations. 1.6.0 / 2014-12-10 DEPRECATED: column.special function. Use column.enumValues instead. Added: Tests for enum values. Added: Enum support for column.sequelizeType function. Updated: Documentation 1.5.1 / 2014-12-04 Fix: Test db does not destroyed after tests. 1.5.0 / 2014-12-04 Fix: column.default() method returns default value with type cast. From now on yype cast part is stripped. Added column.defaultWithTypeCast() method for getting default values with type cast part. Tests added for default values. 1.4.0 / 2014-11-28 Added support for user-defined types. Added column.udType() method to get user defined type name. Added necessary tests. 1.3.1 / 2014-11-27 Added history to readme. Fix: Major error: Single schema or default 'public' schema databases throw error. Fix: Databases without any table throw error. Added tests of this fixes and table without any column. 1.3.0 / 2014-11-27 Parameter validation added to pg-structure main function. This would ease debugging. Fix: pg-structure.generate function was throwing error, now it calls its callback with error if database connection error occurs. 1.2.0 / 2014-11-26 Fix: pg-structure callback does not get error object. Instead error is thrown. Now callback gets error object as its first parameter as expected. db.schema() function now throws more informative error if referenced schema is not found in db and also not in the options of requested schemas. db.schemaExist() function added. History.md file added. (This file) 1.1.0 / 2014-11-25 table.foreignKeyConstraintExist() function added. 1.0.0 / 2014-11-25 Completely rewritten to migrate from plain object to object oriented design. column.sequelizeType() method added. This method gets sequelize compatible type of the column.","title":"History"},{"location":"history/#history-release-notes","text":"","title":"History &amp; Release Notes"},{"location":"history/#42-2018-11-28","text":"Added: schema/type ( PhilWaldmann )","title":"4.2 / 2018-11-28"},{"location":"history/#400-2017-05-30","text":"Added: pg-structure throws exception when a non-existing schema requested. Added: Table#kind to determine whether a table is a view or table. Added: Schema#description and Schema#comment attributes to get schema comments.","title":"4.0.0 / 2017-05-30"},{"location":"history/#3514-2017-03-06","text":"Fixed: If same constraint name is used more than once in same schema (non-unique constraint name), pg-structure was failing.","title":"3.5.14 / 2017-03-06"},{"location":"history/#3511-2017-02-21","text":"Fixed: Column.default() was returning typecast if default value is ''.","title":"3.5.11 / 2017-02-21"},{"location":"history/#350-2016-05-04","text":"Added: Relation naming support for CamelCase tables. Fixed: Default strategy for Many to Many ( m2m ) and Many to One ( m2o ) relations are selected as 'simple' even 'simple' strategy causes conflict. Now complex is selected when there are conflicts between cross types of o2m and m2m . Added: Relation naming documentation. Added: Naming strategy test.","title":"3.5.0 / 2016-05-04"},{"location":"history/#340","text":"Changed: table#descriptionData tag is changed from [JSON] to [pg-structure] (EXPERIMENTAL) Added: o2mRelation#generateName() , m2oRelation#generateName() , m2mRelation#generateName() . Those methods are highly experimental and may be changed or deleted.","title":"3.4.0"},{"location":"history/#332-2016-02-25","text":"Fixed: Tables without primary key was throwing exception for table#primaryKeyColumns . Fixed: table#hasManyTables and table#belongsToTables were returning array instead of Set.","title":"3.3.2 / 2016-02-25"},{"location":"history/#330-2016-02-24","text":"Added: table#descriptionData , table#commentData , column#descriptionData , column#commentData , constraint#descriptionData , constraint#commentData . It is possible to store and access JSON in objects' description.","title":"3.3.0 / 2016-02-24"},{"location":"history/#320-2016-02-24","text":"Added: constraint#description , constraint#comment . Updated: Test ERD corrected.","title":"3.2.0 / 2016-02-24"},{"location":"history/#311-2016-01-30","text":"Added: column#referencedColumns .","title":"3.1.1 / 2016-01-30"},{"location":"history/#310-2016-01-26","text":"Added: #array method is added all Map types to help building arrays in non supporting environments such as nunjucks.","title":"3.1.0 / 2016-01-26"},{"location":"history/#300-2016-01-16","text":"Previous versions of pg-structure are designed to be a build time tool. v3 are designed to be a runtime tool. It is refactored to better performance compared to previous versions. Internal storage is completely rewritten. Loki DB is excellent product, but it is overkill for this project. pg-structure now uses direct object references for speed up things. DB interaction is reduced from 9 SQL queries to 3. Those 3 queries are same queries from previous version. So work of other 6 queries are done by Javascript now. Breaking Change: Column#foreignKeyConstraint is changed to Column#foreignKeyConstraints , Column#referencedColumn is removed, because same column may be part of multiple different foreign key constraints which results in referencing different columns in different tables at the same time. Breaking Change: All ...ByName such as Table#columnsByName methods are removed, and collections such as Table#columns return Map instead of array or object. Maps return values in order like arrays and they can be queried with .has method like objects. Breaking Change: Column#uniqueIndexesNoPK is renamed as Column#uniqueIndexesNoPk . Added: Optional Lazy loading, cache of lazy loaded parts, invalidation logic of cache. Added: pgStructure.serialize and pgStructure.deserialize methods. Added: pgStructure.save and pgStructure.load methods. Load is 10 times faster than querying database. Added: Column#domainSchema Added: Constraint#matchOption , Constraint#referencedColumnsBy Added: Table#belongsToManyTablesPk , Table#m2mRelationsPk Doc updates and changes.","title":"3.0.0 / 2016-01-16"},{"location":"history/#208-2015-12-09","text":"Added: Table#description and Table#comment attributes added to the table object. Fixed: Table sql was returning null for table descriptions.","title":"2.0.8 / 2015-12-09"},{"location":"history/#205-2015-12-08","text":"Changed: Code and API cleanup and simplification since alpha releases. Changed: Array and collection object returning attributes now return empty array or empty object if no result found. Previously they returned null. They are usually used in loops, and this change helps getting rid of null checks. Removed: All methods which are duplicate of attributes. They cause duplicated code and don't add any useful contribution. Same can be achieved using attributes with foreach and better can be achieved with for..of.","title":"2.0.5 / 2015-12-08"},{"location":"history/#200-alpha9-2015-11-29","text":"Fixed: One to many and many to one relations duplicates.","title":"2.0.0-alpha.9 / 2015-11-29"},{"location":"history/#200-alpha8-2015-11-29","text":"Fixed: Join tables with more than one relations produce warning about non-unique constraint. Fixed: referencedTable returns undefined. Fixed: Example on README throws exception. Typo corrected. Catch part added. Added: New tests for fixed bugs.","title":"2.0.0-alpha.8 / 2015-11-29"},{"location":"history/#200-alpha5-2015-11-19","text":"Added: Table#relations and Table#getRelations().","title":"2.0.0-alpha.5 / 2015-11-19"},{"location":"history/#200-alpha3-2015-11-19","text":"Fixed: Broken links in documentation.","title":"2.0.0-alpha.3 / 2015-11-19"},{"location":"history/#200-alpha2-2015-11-17","text":"Added: Index class is added. Fixed: Column#unique was assuming that a column can have only one unique constraint. Now it returns array. Fixed: Column#unique was ignoring unique indexes Now it considers unique indexes too. Fixed: Many typos in constraint class documentation.","title":"2.0.0-alpha.2 / 2015-11-17"},{"location":"history/#200-alpha1-2015-11-11","text":"BREAKING CHANGES Completely rewritten. Methods are converted to read only attributes. New methods are named as verb such as getColumn(). New classes added: Relation, O2MRelation (one to many), M2ORelation (many to one), M2M Relation (many to many). Constraint features that are technically not available in DB Engine moved from Constraint class to related Relation classes. Documentation updated completely and added clearer examples. Some method names and attributes are more intuitive than previous version.","title":"2.0.0-alpha.1 / 2015-11-11"},{"location":"history/#why-v2-has-incompatible-changes","text":"Version 2 is designed to be more elegant and more intuitive. Methods are changed to read only attributes and new methods are easily distinguished from attributes with verb based names such as columns vs getColumns() . Additionally new Relation classes are added. Some of the features are moved from Constraint to Relation , because some features are technically not available in DB Engine and those features misrepresent Constraint . For example many to many relations are virtual relationships which do not actually exist in database. They are tables joined via a third join table.","title":"Why v2 has incompatible changes?"},{"location":"history/#1111-2015-06-16","text":"Added: JSONB support. Contributed by: viniciuspinto (https://github.com/viniciuspinto)","title":"1.11.1 / 2015-06-16"},{"location":"history/#1110-2014-12-30","text":"Added: Constraint.throughForeignKeyConstraintToSelf() method added. Added: Winston logging. Fixed: Many to Many relations has name collisions if join table connects more than one table and one of the tables has more than one connection to join table. Naming of many to many relations changed.","title":"1.11.0 / 2014-12-30"},{"location":"history/#1100-2014-12-23","text":"Added: db.includedSchemas method to get list of requested schemas to be parsed. Added: db.schemaIncluded method to determine if given schema name is one of the requested schemas to be parsed. Fix: If a table has a reference to not included schema, throws exception. Should not include its foreign key. Doc update.","title":"1.10.0 / 2014-12-23"},{"location":"history/#190-2014-12-12","text":"Added: table.hasManyThrough.throughForeignKeyConstraint method added to constraint class.","title":"1.9.0 / 2014-12-12"},{"location":"history/#183-2014-12-10","text":"Fix: Sequelize type length, precision.","title":"1.8.3 / 2014-12-10"},{"location":"history/#182-2014-12-10","text":"Fix: Sequelize type date, time etc. has no length property. Fix: Sequelize type dateonly added. Tests added.","title":"1.8.2 / 2014-12-10"},{"location":"history/#180-2014-12-10","text":"Added: Shortcut function 'get' added to db, schema and table classes. Fix: hasManyThrough does not return foreign keys.","title":"1.8.0 / 2014-12-10"},{"location":"history/#170-2014-12-10","text":"Added: onDelete and onUpdate added to hasMany and hasManyThrough relations.","title":"1.7.0 / 2014-12-10"},{"location":"history/#160-2014-12-10","text":"DEPRECATED: column.special function. Use column.enumValues instead. Added: Tests for enum values. Added: Enum support for column.sequelizeType function. Updated: Documentation","title":"1.6.0 / 2014-12-10"},{"location":"history/#151-2014-12-04","text":"Fix: Test db does not destroyed after tests.","title":"1.5.1 / 2014-12-04"},{"location":"history/#150-2014-12-04","text":"Fix: column.default() method returns default value with type cast. From now on yype cast part is stripped. Added column.defaultWithTypeCast() method for getting default values with type cast part. Tests added for default values.","title":"1.5.0 / 2014-12-04"},{"location":"history/#140-2014-11-28","text":"Added support for user-defined types. Added column.udType() method to get user defined type name. Added necessary tests.","title":"1.4.0 / 2014-11-28"},{"location":"history/#131-2014-11-27","text":"Added history to readme. Fix: Major error: Single schema or default 'public' schema databases throw error. Fix: Databases without any table throw error. Added tests of this fixes and table without any column.","title":"1.3.1 / 2014-11-27"},{"location":"history/#130-2014-11-27","text":"Parameter validation added to pg-structure main function. This would ease debugging. Fix: pg-structure.generate function was throwing error, now it calls its callback with error if database connection error occurs.","title":"1.3.0 / 2014-11-27"},{"location":"history/#120-2014-11-26","text":"Fix: pg-structure callback does not get error object. Instead error is thrown. Now callback gets error object as its first parameter as expected. db.schema() function now throws more informative error if referenced schema is not found in db and also not in the options of requested schemas. db.schemaExist() function added. History.md file added. (This file)","title":"1.2.0 / 2014-11-26"},{"location":"history/#110-2014-11-25","text":"table.foreignKeyConstraintExist() function added.","title":"1.1.0 / 2014-11-25"},{"location":"history/#100-2014-11-25","text":"Completely rewritten to migrate from plain object to object oriented design. column.sequelizeType() method added. This method gets sequelize compatible type of the column.","title":"1.0.0 / 2014-11-25"},{"location":"license/","text":"LICENSE The MIT License (MIT) Copyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"The MIT License (MIT) Copyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"link-to-doc/","text":"Documentation See full documentation at http://www.pg-structure.com","title":"Documentation"},{"location":"link-to-doc/#documentation","text":"See full documentation at http://www.pg-structure.com","title":"Documentation"},{"location":"relation-names/","text":"Relation Names Actually database systems does not have relations. They have foreign key constraints. Relation is a concept to describe relationships between tables based on foreign key constraints. pg-structure provides O2MRelation , M2MRelation and M2ORelation classes relations. Since relations are not real objects defined in database systems, they do not have names. Relation names used in ORM systems should generated somehow. Naming is already very complex mental process and there are multiple methods and preferences to name relations. pg-structure provides more than one strategy to generate names for different preferences and to reduce chance of conflicting names. They aren't perfect, but at least does the job for most of the time. Strategies To name relations pg-structure provides strategies below. All strategies tries to guess inflection of table names such as snake_case or CamelCase with a simple test. If first letter is capital, then it is assumed CamelCase, snake_case otherwise. Generated names use guessed inflection. When generateName() method is called without any strategies, pg-structure chooses simple strategy. If there are more than one relation between same tables, additional relations are named using complex strategy to prevent conflicts. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: O2M examples are given for: product --- line_item (i.e. product.o2mRelations.values()[0].generateName('simple') ). M2O examples are given for: line_item --- product (i.e. lineItem.m2oRelations.values()[0].generateName('simple') ). M2M examples are given for: product --- line_item --- cart (i.e. product.m2mRelations.values()[0].generateName('simple') ). Relation Form Strategy Description Example O2M simple Plural Target table name. line_items O2M complex Plural Constraint name, but source table name stripped from beginning. sold_items M2O simple Singular Target table name. product M2O complex Singular First foreign key column name. If 'id' string is present, it is stripped, otherwise 'related' prefix added. product M2M simple Plural Target table name. carts M2M complex Plural Join Table Name + Foreign Key to Target Table. If 'id' string is present, it is stripped, otherwise 'related' prefix added. line_item_carts Overriding Even using complex strategy, it is sometimes impossible to generate unique names. In that case it is possible to override generated names by providing clues to pg-structure in database. Using Constraint Description Data (!EXPERIMENTAL) You can use constraint's description in PostgreSQL. Description data is fetched from constraint description. In short, you can put JSON data between [pg-structure] and [/pg-structure] tags in constraint description. ( See Description Data in Concepts ). It is a non-strict JSON data. pg-structure uses given names in description data. Example: [pg-structure] { name: { m2m: my_custom_name } } [/pg-structure] Relation JSON Key Notes O2M name.hasMany or name.o2m Used as it is M2O name.belongsTo or name.m2o Used as it is M2M name.belongsToMany or name.m2m Used as: Given String + Target Table Name Using Constraint Name as CSV (!EXPERIMENTAL) You can also name your constraints in database as a CSV. If constraint name includes comma, pg-structure assumes it is CSV value to provide clue for relation names. CSV Description Notes 1 One to many relation name Used as it is 2 Many to one relation name Used as it is 3 Prefix for many to many relations Used as: Given String + Target Table Name Example: sold_items, item, sku cart_goods, basket, bag product ------------------------ line_item ------------------------- cart CSV From To Type Name 1 product line_item O2M sold_items 2 line_item product M2O item 3 product cart M2M sku_carts 1 cart line_item O2M cart_goods 2 line_item cart M2O basket 3 cart product M2M bag_products Priority Relation naming function prioritizes different methods as follows: | # | Method | Notes | | --- | --- | --- | | 1 | Strategy from function parameter | If parameter is given such as rel.generateName('simple') , uses given strategy. | | 2 | Constraint Name CSV | PRO: May easy to use in ERD tools. CON: Invasive, seen in DB error messages. | | 3 | Constraint Description Data | PRO: Non invasive. CON: One more step in ERD tools. | | 4 | Simple Stratgey | If there is no previous relation between same tables. | | 5 | Complex Strategy | Last resort. | Module's Author's Practices Use generateName() without parameters, and if you don't like generated names for a specific relation, use description data in that constraint's description. The reason of preferring description data over constraint name is that when foreign key violation occurs, PostgreSQL error messages contains constraint names and long CSV names may be confusing.","title":"Relation Names"},{"location":"relation-names/#relation-names","text":"Actually database systems does not have relations. They have foreign key constraints. Relation is a concept to describe relationships between tables based on foreign key constraints. pg-structure provides O2MRelation , M2MRelation and M2ORelation classes relations. Since relations are not real objects defined in database systems, they do not have names. Relation names used in ORM systems should generated somehow. Naming is already very complex mental process and there are multiple methods and preferences to name relations. pg-structure provides more than one strategy to generate names for different preferences and to reduce chance of conflicting names. They aren't perfect, but at least does the job for most of the time.","title":"Relation Names"},{"location":"relation-names/#strategies","text":"To name relations pg-structure provides strategies below. All strategies tries to guess inflection of table names such as snake_case or CamelCase with a simple test. If first letter is capital, then it is assumed CamelCase, snake_case otherwise. Generated names use guessed inflection. When generateName() method is called without any strategies, pg-structure chooses simple strategy. If there are more than one relation between same tables, additional relations are named using complex strategy to prevent conflicts. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: O2M examples are given for: product --- line_item (i.e. product.o2mRelations.values()[0].generateName('simple') ). M2O examples are given for: line_item --- product (i.e. lineItem.m2oRelations.values()[0].generateName('simple') ). M2M examples are given for: product --- line_item --- cart (i.e. product.m2mRelations.values()[0].generateName('simple') ). Relation Form Strategy Description Example O2M simple Plural Target table name. line_items O2M complex Plural Constraint name, but source table name stripped from beginning. sold_items M2O simple Singular Target table name. product M2O complex Singular First foreign key column name. If 'id' string is present, it is stripped, otherwise 'related' prefix added. product M2M simple Plural Target table name. carts M2M complex Plural Join Table Name + Foreign Key to Target Table. If 'id' string is present, it is stripped, otherwise 'related' prefix added. line_item_carts","title":"Strategies"},{"location":"relation-names/#overriding","text":"Even using complex strategy, it is sometimes impossible to generate unique names. In that case it is possible to override generated names by providing clues to pg-structure in database.","title":"Overriding"},{"location":"relation-names/#using-constraint-description-data-experimental","text":"You can use constraint's description in PostgreSQL. Description data is fetched from constraint description. In short, you can put JSON data between [pg-structure] and [/pg-structure] tags in constraint description. ( See Description Data in Concepts ). It is a non-strict JSON data. pg-structure uses given names in description data. Example: [pg-structure] { name: { m2m: my_custom_name } } [/pg-structure] Relation JSON Key Notes O2M name.hasMany or name.o2m Used as it is M2O name.belongsTo or name.m2o Used as it is M2M name.belongsToMany or name.m2m Used as: Given String + Target Table Name","title":"Using Constraint Description Data (!EXPERIMENTAL)"},{"location":"relation-names/#using-constraint-name-as-csv-experimental","text":"You can also name your constraints in database as a CSV. If constraint name includes comma, pg-structure assumes it is CSV value to provide clue for relation names. CSV Description Notes 1 One to many relation name Used as it is 2 Many to one relation name Used as it is 3 Prefix for many to many relations Used as: Given String + Target Table Name Example: sold_items, item, sku cart_goods, basket, bag product ------------------------ line_item ------------------------- cart CSV From To Type Name 1 product line_item O2M sold_items 2 line_item product M2O item 3 product cart M2M sku_carts 1 cart line_item O2M cart_goods 2 line_item cart M2O basket 3 cart product M2M bag_products","title":"Using Constraint Name as CSV (!EXPERIMENTAL)"},{"location":"relation-names/#priority","text":"Relation naming function prioritizes different methods as follows: | # | Method | Notes | | --- | --- | --- | | 1 | Strategy from function parameter | If parameter is given such as rel.generateName('simple') , uses given strategy. | | 2 | Constraint Name CSV | PRO: May easy to use in ERD tools. CON: Invasive, seen in DB error messages. | | 3 | Constraint Description Data | PRO: Non invasive. CON: One more step in ERD tools. | | 4 | Simple Stratgey | If there is no previous relation between same tables. | | 5 | Complex Strategy | Last resort. |","title":"Priority"},{"location":"relation-names/#modules-authors-practices","text":"Use generateName() without parameters, and if you don't like generated names for a specific relation, use description data in that constraint's description. The reason of preferring description data over constraint name is that when foreign key violation occurs, PostgreSQL error messages contains constraint names and long CSV names may be confusing.","title":"Module's Author's Practices"},{"location":"api/Column/","text":"Column Kind : global class Column new Column(args) .allowNull : boolean .arrayDimension : number .arrayType : string | null .comment : string | null .commentData : Object .db : Db .default : string | null .defaultWithTypeCast : string | null .description : string | null .descriptionData : Object .domainName : string | null .domainFullName : string | null .domainFullCatalogName : string | null .domainSchema : string | null .enumLabels : Array. string | null .enumValues : Array. string | null .foreignKeyConstraints : Map. Constraint .fullName : string .fullCatalogName : string .indexes : Map. Index .isAutoIncrement : boolean .isSerial : boolean .isForeignKey : boolean .isPrimaryKey : boolean .length : number | null .name : string .notNull : boolean .parent : Table .precision : number | null .referencedColumns : Set. Column .scale : number | null .schema : Schema .type : postgreSQLDataType .table : Table .userDefinedType : postgreSQLDataType | null .uniqueIndexesNoPk : Map. Index .uniqueIndexes : Map. Index new Column(args) Constructor function. You don't need to call constructor manually. pg-structure handles this. Returns : Column - - Column instance. Param Type Description args Object Attributes of the Column instance to be created. column.allowNull : boolean true if column is allowed to contain null values; otherwise false . Kind : instance property of Column Read only : true See : notNull . column.arrayDimension : number Number of dimensions, if the column is an array type; otherwise 0. Kind : instance property of Column Read only : true column.arrayType : string | null If this column is an array, data type of the array. If column is not an array equals null . Kind : instance property of Column Read only : true column.comment : string | null Comment about column. Kind : instance property of Column Read only : true See : Aliases description column.commentData : Object JS Object extracted from column description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Column Read only : true See : Aliases descriptionData Example let description = column.comment; // - 'This column holds name of account. [JSON]{ extraData : 2 }[/PGEN]' let extra = column.commentData; // - { extraData: 2 } console.log(column.commentData.extraData); // - 2 column.db : Db Db this table belongs to. Kind : instance property of Column Read only : true column.default : string | null Default value of the column without typecast. Default values includes single quotes except sql functions and numeric values. Kind : instance property of Column Read only : true See : defaultWithTypeCast for default values with typecast as returned by PostgreSQL Example var column = db('crm').schema('public').table('contact').column('name'); var type = column.default; // 'George' type = age.default; // 20 type = created_at.default; // now() type = column.defaultWithTypeCast; // 'George'::character varying column.defaultWithTypeCast : string | null Default expression of the column with typecast. PostgreSQL returns default values with typecast. Default values includes single quotes except sql functions and numeric values. Also sql functions and numeric values do not contain type cast. Kind : instance property of Column Read only : true See : default for accessing default values without typecast. Example var column = db('crm').schema('public').table('contact').column('name'); var type = column.defaultWithTypeCast; // 'George'::character varying type = age.defaultWithTypeCast; // 20 type = created_at.defaultWithTypeCast; // now() type = column.default; // 'George' column.description : string | null Comment about column. Kind : instance property of Column Read only : true See : Aliases comment column.descriptionData : Object JS Object extracted from column description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Column Read only : true See : Aliases commentData Example let description = column.description; // - 'This column holds name of account. [JSON]{ extraData : 2 }[/PGEN]' let extra = column.descriptionData; // - { extraData: 2 } console.log(column.descriptionData.extraData); // - 2 column.domainName : string | null If column data type is a domain, this equals domain name without domain schema. Otherwise null. Kind : instance property of Column Read only : true See : domainFullName domainFullCatalogName . Example var domainName = column.domainName; // i.e. 'phone_number' column.domainFullName : string | null If column data type is a domain, this equals domain name including domain schema. Otherwise null. Kind : instance property of Column Read only : true See : domainName . Example var domainName = column.domainFullName; // i.e. 'public.phone_number' column.domainFullCatalogName : string | null If column data type is a domain, this equals domain name including domain schema. Otherwise null. Kind : instance property of Column Read only : true See : domainName . Example var domainName = column.domainFullName; // i.e. 'public.phone_number' column.domainSchema : string | null If column data type is a domain, this equals domain schema name. Otherwise null. Kind : instance property of Column Read only : true See : domainFullName . Example var domainName = column.domainSchema; // i.e. 'public' column.enumLabels : Array. string | null Array of the textual labels for enum values column may contain. If column is not an enum, then this equals undefined Kind : instance property of Column Read only : true See : Aliases enumValues column.enumValues : Array. string | null Array of the textual labels for enum values column may contain. If column is not an enum, then this equals undefined Kind : instance property of Column Read only : true See : Aliases enumLabels column.foreignKeyConstraints : Map. Constraint Map of foreign key constraints of the column, if column is part of one or more foreign key constraint. Kind : instance property of Column Read only : true column.fullName : string Full name of the Column with (.) notation. Kind : instance property of Column Read only : true Example var fullName = column.fullName; // public.account.id column.fullCatalogName : string Full name of the Column with (.) notation including catalog name. Kind : instance property of Column Read only : true Example var fullName = table.fullCatalogName; // crm.public.account.id column.indexes : Map. Index Map of indexes , which column is part of. Kind : instance property of Column Read only : true column.isAutoIncrement : boolean true if this column has an auto incremented ( nextval() ) default value or defined one of serial types. Kind : instance property of Column Read only : true See : Aliases isSerial column.isSerial : boolean true if this column has an auto incremented ( nextval() ) default value or defined one of serial types. Kind : instance property of Column Read only : true See : Aliases isAutoIncrement column.isForeignKey : boolean true if this column is a foreign key or part of a foreign key constraint; otherwise false . Please note that a foreign key may contain more than one column. Kind : instance property of Column Read only : true column.isPrimaryKey : boolean true if this column is a primary key or part of a primary key constraint; otherwise false . Please note that a primary key may contain more than one column. Kind : instance property of Column Read only : true column.length : number | null Length of the column. For data type identified as a character or bit string type, this is the declared maximum length. If column is an array, same rule applies data type of the array. For character arrays or bit string type arrays, this is the declared maximum length of the array's data type. For arrays atttypmod records type-specific data supplied at table creation time (for example, the maximum length of a varchar column). It is passed to type-specific input functions and length coercion functions. This value is undefined for all other data types or if no maximum length was declared. Kind : instance property of Column Read only : true column.name : string Name of the column. Kind : instance property of Column Read only : true column.notNull : boolean true if column is not allowed to contain null values; otherwise false . Kind : instance property of Column Read only : true See : allowNull column.parent : Table Table this column belongs to. Kind : instance property of Column Read only : true See : Aliases table Example var table = column.parent; // Table instance column.precision : number | null If data type identifies a numeric type, this contains the (declared or implicit) precision of the type for this column. The precision indicates the number of significant digits. If data type identifies a date, time, timestamp, or interval type, this column contains the (declared or implicit) fractional seconds precision of the type for this attribute, that is, the number of decimal digits maintained following the decimal point in the seconds value. If data type is an array. Same rules apply for the data type of the array, and this value would become precision of the data type of the array. For all other data types, this is undefined . Kind : instance property of Column Read only : true column.referencedColumns : Set. Column All referenced columns in all foreign key constraints by this column. Kind : instance property of Column Read only : true column.scale : number | null If data type identifies an exact numeric type, this contains the (declared or implicit) scale of the type for this attribute. The scale indicates the number of significant digits to the right of the decimal point. If data type is an array. Same rule applies for the data type of the array, and this value would become scale of the data type of the array. For all other data types, this is undefined . Kind : instance property of Column Read only : true column.schema : Schema Schema this column belongs to. Kind : instance property of Column Read only : true column.type : postgreSQLDataType Data type of the column. For built-in types this is name of type. ARRAY , for arrays, and type of array can be found via arrayType . USER-DEFINED for user defined types, and type of it can be found via userDefinedType . For domain types this is not domain name, but underlying base type of that domain. Use domainName or domainFullName Kind : instance property of Column Read only : true See userDefinedType domainName and domainFullName column.table : Table Table this column belongs to. Kind : instance property of Column Read only : true See : Aliases parent Example var table = column.table; // Table instance column.userDefinedType : postgreSQLDataType | null If type of column is user defined such as composite, enumerated, this is the data type of the underlying type. Kind : instance property of Column Read only : true column.uniqueIndexesNoPk : Map. Index Map of unique indexes , which column is part of. Excludes primary key indexes. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates. Kind : instance property of Column Read only : true See : uniqueIndexes for all unique indexes including primary key indexes. column.uniqueIndexes : Map. Index Map of unique indexes , which column is part of. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates. Kind : instance property of Column Read only : true See : uniqueIndexesNoPK for unique indexes excluding primary key indexes.","title":"Column"},{"location":"api/Column/#column","text":"Kind : global class Column new Column(args) .allowNull : boolean .arrayDimension : number .arrayType : string | null .comment : string | null .commentData : Object .db : Db .default : string | null .defaultWithTypeCast : string | null .description : string | null .descriptionData : Object .domainName : string | null .domainFullName : string | null .domainFullCatalogName : string | null .domainSchema : string | null .enumLabels : Array. string | null .enumValues : Array. string | null .foreignKeyConstraints : Map. Constraint .fullName : string .fullCatalogName : string .indexes : Map. Index .isAutoIncrement : boolean .isSerial : boolean .isForeignKey : boolean .isPrimaryKey : boolean .length : number | null .name : string .notNull : boolean .parent : Table .precision : number | null .referencedColumns : Set. Column .scale : number | null .schema : Schema .type : postgreSQLDataType .table : Table .userDefinedType : postgreSQLDataType | null .uniqueIndexesNoPk : Map. Index .uniqueIndexes : Map. Index","title":"Column"},{"location":"api/Column/#new-columnargs","text":"Constructor function. You don't need to call constructor manually. pg-structure handles this. Returns : Column - - Column instance. Param Type Description args Object Attributes of the Column instance to be created.","title":"new Column(args)"},{"location":"api/Column/#columnallownull-boolean","text":"true if column is allowed to contain null values; otherwise false . Kind : instance property of Column Read only : true See : notNull .","title":"column.allowNull : boolean"},{"location":"api/Column/#columnarraydimension-number","text":"Number of dimensions, if the column is an array type; otherwise 0. Kind : instance property of Column Read only : true","title":"column.arrayDimension : number"},{"location":"api/Column/#columnarraytype-string-124-null","text":"If this column is an array, data type of the array. If column is not an array equals null . Kind : instance property of Column Read only : true","title":"column.arrayType : string | null"},{"location":"api/Column/#columncomment-string-124-null","text":"Comment about column. Kind : instance property of Column Read only : true See : Aliases description","title":"column.comment : string | null"},{"location":"api/Column/#columncommentdata-object","text":"JS Object extracted from column description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Column Read only : true See : Aliases descriptionData Example let description = column.comment; // - 'This column holds name of account. [JSON]{ extraData : 2 }[/PGEN]' let extra = column.commentData; // - { extraData: 2 } console.log(column.commentData.extraData); // - 2","title":"column.commentData : Object"},{"location":"api/Column/#columndb-db","text":"Db this table belongs to. Kind : instance property of Column Read only : true","title":"column.db : Db"},{"location":"api/Column/#columndefault-string-124-null","text":"Default value of the column without typecast. Default values includes single quotes except sql functions and numeric values. Kind : instance property of Column Read only : true See : defaultWithTypeCast for default values with typecast as returned by PostgreSQL Example var column = db('crm').schema('public').table('contact').column('name'); var type = column.default; // 'George' type = age.default; // 20 type = created_at.default; // now() type = column.defaultWithTypeCast; // 'George'::character varying","title":"column.default : string | null"},{"location":"api/Column/#columndefaultwithtypecast-string-124-null","text":"Default expression of the column with typecast. PostgreSQL returns default values with typecast. Default values includes single quotes except sql functions and numeric values. Also sql functions and numeric values do not contain type cast. Kind : instance property of Column Read only : true See : default for accessing default values without typecast. Example var column = db('crm').schema('public').table('contact').column('name'); var type = column.defaultWithTypeCast; // 'George'::character varying type = age.defaultWithTypeCast; // 20 type = created_at.defaultWithTypeCast; // now() type = column.default; // 'George'","title":"column.defaultWithTypeCast : string | null"},{"location":"api/Column/#columndescription-string-124-null","text":"Comment about column. Kind : instance property of Column Read only : true See : Aliases comment","title":"column.description : string | null"},{"location":"api/Column/#columndescriptiondata-object","text":"JS Object extracted from column description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Column Read only : true See : Aliases commentData Example let description = column.description; // - 'This column holds name of account. [JSON]{ extraData : 2 }[/PGEN]' let extra = column.descriptionData; // - { extraData: 2 } console.log(column.descriptionData.extraData); // - 2","title":"column.descriptionData : Object"},{"location":"api/Column/#columndomainname-string-124-null","text":"If column data type is a domain, this equals domain name without domain schema. Otherwise null. Kind : instance property of Column Read only : true See : domainFullName domainFullCatalogName . Example var domainName = column.domainName; // i.e. 'phone_number'","title":"column.domainName : string | null"},{"location":"api/Column/#columndomainfullname-string-124-null","text":"If column data type is a domain, this equals domain name including domain schema. Otherwise null. Kind : instance property of Column Read only : true See : domainName . Example var domainName = column.domainFullName; // i.e. 'public.phone_number'","title":"column.domainFullName : string | null"},{"location":"api/Column/#columndomainfullcatalogname-string-124-null","text":"If column data type is a domain, this equals domain name including domain schema. Otherwise null. Kind : instance property of Column Read only : true See : domainName . Example var domainName = column.domainFullName; // i.e. 'public.phone_number'","title":"column.domainFullCatalogName : string | null"},{"location":"api/Column/#columndomainschema-string-124-null","text":"If column data type is a domain, this equals domain schema name. Otherwise null. Kind : instance property of Column Read only : true See : domainFullName . Example var domainName = column.domainSchema; // i.e. 'public'","title":"column.domainSchema : string | null"},{"location":"api/Column/#columnenumlabels-arraystring-124-null","text":"Array of the textual labels for enum values column may contain. If column is not an enum, then this equals undefined Kind : instance property of Column Read only : true See : Aliases enumValues","title":"column.enumLabels : Array.&lt;string&gt; | null"},{"location":"api/Column/#columnenumvalues-arraystring-124-null","text":"Array of the textual labels for enum values column may contain. If column is not an enum, then this equals undefined Kind : instance property of Column Read only : true See : Aliases enumLabels","title":"column.enumValues : Array.&lt;string&gt; | null"},{"location":"api/Column/#columnforeignkeyconstraints-mapconstraint","text":"Map of foreign key constraints of the column, if column is part of one or more foreign key constraint. Kind : instance property of Column Read only : true","title":"column.foreignKeyConstraints : Map.&lt;Constraint&gt;"},{"location":"api/Column/#columnfullname-string","text":"Full name of the Column with (.) notation. Kind : instance property of Column Read only : true Example var fullName = column.fullName; // public.account.id","title":"column.fullName : string"},{"location":"api/Column/#columnfullcatalogname-string","text":"Full name of the Column with (.) notation including catalog name. Kind : instance property of Column Read only : true Example var fullName = table.fullCatalogName; // crm.public.account.id","title":"column.fullCatalogName : string"},{"location":"api/Column/#columnindexes-mapindex","text":"Map of indexes , which column is part of. Kind : instance property of Column Read only : true","title":"column.indexes : Map.&lt;Index&gt;"},{"location":"api/Column/#columnisautoincrement-boolean","text":"true if this column has an auto incremented ( nextval() ) default value or defined one of serial types. Kind : instance property of Column Read only : true See : Aliases isSerial","title":"column.isAutoIncrement : boolean"},{"location":"api/Column/#columnisserial-boolean","text":"true if this column has an auto incremented ( nextval() ) default value or defined one of serial types. Kind : instance property of Column Read only : true See : Aliases isAutoIncrement","title":"column.isSerial : boolean"},{"location":"api/Column/#columnisforeignkey-boolean","text":"true if this column is a foreign key or part of a foreign key constraint; otherwise false . Please note that a foreign key may contain more than one column. Kind : instance property of Column Read only : true","title":"column.isForeignKey : boolean"},{"location":"api/Column/#columnisprimarykey-boolean","text":"true if this column is a primary key or part of a primary key constraint; otherwise false . Please note that a primary key may contain more than one column. Kind : instance property of Column Read only : true","title":"column.isPrimaryKey : boolean"},{"location":"api/Column/#columnlength-number-124-null","text":"Length of the column. For data type identified as a character or bit string type, this is the declared maximum length. If column is an array, same rule applies data type of the array. For character arrays or bit string type arrays, this is the declared maximum length of the array's data type. For arrays atttypmod records type-specific data supplied at table creation time (for example, the maximum length of a varchar column). It is passed to type-specific input functions and length coercion functions. This value is undefined for all other data types or if no maximum length was declared. Kind : instance property of Column Read only : true","title":"column.length : number | null"},{"location":"api/Column/#columnname-string","text":"Name of the column. Kind : instance property of Column Read only : true","title":"column.name : string"},{"location":"api/Column/#columnnotnull-boolean","text":"true if column is not allowed to contain null values; otherwise false . Kind : instance property of Column Read only : true See : allowNull","title":"column.notNull : boolean"},{"location":"api/Column/#columnparent-table","text":"Table this column belongs to. Kind : instance property of Column Read only : true See : Aliases table Example var table = column.parent; // Table instance","title":"column.parent : Table"},{"location":"api/Column/#columnprecision-number-124-null","text":"If data type identifies a numeric type, this contains the (declared or implicit) precision of the type for this column. The precision indicates the number of significant digits. If data type identifies a date, time, timestamp, or interval type, this column contains the (declared or implicit) fractional seconds precision of the type for this attribute, that is, the number of decimal digits maintained following the decimal point in the seconds value. If data type is an array. Same rules apply for the data type of the array, and this value would become precision of the data type of the array. For all other data types, this is undefined . Kind : instance property of Column Read only : true","title":"column.precision : number | null"},{"location":"api/Column/#columnreferencedcolumns-setcolumn","text":"All referenced columns in all foreign key constraints by this column. Kind : instance property of Column Read only : true","title":"column.referencedColumns : Set.&lt;Column&gt;"},{"location":"api/Column/#columnscale-number-124-null","text":"If data type identifies an exact numeric type, this contains the (declared or implicit) scale of the type for this attribute. The scale indicates the number of significant digits to the right of the decimal point. If data type is an array. Same rule applies for the data type of the array, and this value would become scale of the data type of the array. For all other data types, this is undefined . Kind : instance property of Column Read only : true","title":"column.scale : number | null"},{"location":"api/Column/#columnschema-schema","text":"Schema this column belongs to. Kind : instance property of Column Read only : true","title":"column.schema : Schema"},{"location":"api/Column/#columntype-postgresqldatatype","text":"Data type of the column. For built-in types this is name of type. ARRAY , for arrays, and type of array can be found via arrayType . USER-DEFINED for user defined types, and type of it can be found via userDefinedType . For domain types this is not domain name, but underlying base type of that domain. Use domainName or domainFullName Kind : instance property of Column Read only : true See userDefinedType domainName and domainFullName","title":"column.type : postgreSQLDataType"},{"location":"api/Column/#columntable-table","text":"Table this column belongs to. Kind : instance property of Column Read only : true See : Aliases parent Example var table = column.table; // Table instance","title":"column.table : Table"},{"location":"api/Column/#columnuserdefinedtype-postgresqldatatype-124-null","text":"If type of column is user defined such as composite, enumerated, this is the data type of the underlying type. Kind : instance property of Column Read only : true","title":"column.userDefinedType : postgreSQLDataType | null"},{"location":"api/Column/#columnuniqueindexesnopk-mapindex","text":"Map of unique indexes , which column is part of. Excludes primary key indexes. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates. Kind : instance property of Column Read only : true See : uniqueIndexes for all unique indexes including primary key indexes.","title":"column.uniqueIndexesNoPk : Map.&lt;Index&gt;"},{"location":"api/Column/#columnuniqueindexes-mapindex","text":"Map of unique indexes , which column is part of. PostgreSQL already creates a unique index for unique constraints . So there is no need to look for unique constraints which will result duplicates. Kind : instance property of Column Read only : true See : uniqueIndexesNoPK for unique indexes excluding primary key indexes.","title":"column.uniqueIndexes : Map.&lt;Index&gt;"},{"location":"api/Constraint/","text":"Constraint Class which represent a constraint. Provides attributes and methods for details of the constraint. Notes for Through Constraints Through constraints are used for many to many relationships. Actually there isn't such a thing called many to many relationship or through constraint in the database engine. They are concepts to describe records which may be related more than one record on both sides. For example an invoice may contain more than product and a product may related to more than one invoice. Those relationships are solved a so called many to many join table . Constraint class supports many to many relationships. Since those constraints are not present in database engine, they are extracted by estimation/interpretation. Many non-join tables in a database could have more than one foreign key constraints, and they may not meant to be join tables, but they have still through relationships . Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Product table has 3 foreign key constraints. It is obvious that product table is not meant to be a many to many join table. However product could have been join table for size vendor , color vendor and size color . As a result size, color and vendor tables would have many to many through constraints . Kind : global class Constraint new Constraint(args) .name : string .fullName : string .fullCatalogName : string .type : contsraintType .comment : string .commentData : Object .description : string .descriptionData : Object .child : Table .table : Table .db : Db .schema : Schema .matchOption : string .onUpdate : constraintRule | null .onDelete : constraintRule | null .referencedTable : Table | null .parent : Table | null .columns : Map. Column .referencedColumnsBy : Map. Column new Constraint(args) Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Constraint instance to be created. args.parent Table For foreign key constraints this is Table instance this constraint refers to. If this is not a foreign key constraint this is null . args.table Table Table instance the Constraint is defined in. args.schemaName string Schema name of the Constraint. args.name string Name of the Constraint. args.type string Constraint type. args.description string Description of the constraint. args.descriptionData Object Extra data to store in object. args.onUpdate string Update rule of the constraint. args.onDelete string Delete rule of the constraint. args.matchOption string Match option of the constraint. constraint.name : string Name of the constraint. Kind : instance property of Constraint Read only : true constraint.fullName : string Full name of the constraint with (.) notation. Kind : instance property of Constraint Read only : true Example var fullName = constraint.fullName; // crm.public constraint.fullCatalogName : string Full name of the constraint with (.) notation including catalog name. Kind : instance property of Constraint Read only : true Example var fullCatalogName = constraint.fullCatalogName; // crm.public constraint.type : contsraintType Constraint type. One of PRIMARY KEY , FOREIGN KEY or CHECK Kind : instance property of Constraint Read only : true constraint.comment : string Comment of the Constraint. Kind : instance property of Constraint Read only : true See : Aliases description constraint.commentData : Object JS Object extracted from constraint description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Constraint Read only : true See : Aliases descriptionData Example let description = constraint.comment; // - 'This contraint refers contacts. [JSON]{ extraData : 2 }[/PGEN]' let extra = constraint.commentData; // - { extraData: 2 } console.log(constraint.commentData.extraData); // - 2 constraint.description : string Comment of the Constraint. Kind : instance property of Constraint Read only : true See : Aliases comment constraint.descriptionData : Object JS Object extracted from constraint description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Constraint Read only : true See : Aliases commentData Example let description = constraint.description; // - 'This contraint refers contacts. [JSON]{ extraData : 2 }[/PGEN]' let extra = constraint.descriptionData; // - { extraData: 2 } console.log(constraint.descriptionData.extraData); // - 2 constraint.child : Table Child table of this constraint . Note for foreign key constraints: Child table is the table which contains foreign key. In example schema product is a child table (vendor_id FK) of vendor table. Kind : instance property of Constraint Read only : true Example var table = constraint.child; constraint.table : Table Table which this constraint belongs to or defined in. Note for foreign key constraints: As usual PostgreSQL defines foreign key constraints in child tables, where foreign key column is defined, so this is child table for foreign key constraints. Kind : instance property of Constraint Read only : true Example var table = constraint.table; constraint.db : Db Db this constraint belongs to. Kind : instance property of Constraint Read only : true constraint.schema : Schema Schema this constraint belongs to. Kind : instance property of Constraint Read only : true constraint.matchOption : string Match option of Constraint . Kind : instance property of Constraint Read only : true constraint.onUpdate : constraintRule | null Update rule for foreign key constraints . One of CASCADE , SET NULL , SET DEFAULT , RESTRICT , NO ACTION If this is not a foreign key constraint this is null . Kind : instance property of Constraint Read only : true constraint.onDelete : constraintRule | null Update rule for foreign key constraints . One of CASCADE , SET NULL , SET DEFAULT , RESTRICT , NO ACTION If this is not a foreign key constraint this is null . Kind : instance property of Constraint Read only : true constraint.referencedTable : Table | null For foreign key constraints this is Table instance this constraint refers to. If this is not a foreign key constraint this is null . Kind : instance property of Constraint Read only : true See : Aliases parent constraint.parent : Table | null For foreign key constraints this is Table instance this constraint refers to. If this is not a foreign key constraint this is null . Please Note: This is not the Table this constraint belongs to or defined in. Parent applies only to foreign key constraints and for foreign key constraints parent means referenced table not the table it is defined in. Kind : instance property of Constraint Read only : true See Aliases referencedTable To get Table this constraint belongs to or defined in, use table . constraint.columns : Map. Column For foreign key constraints, this is map of columns restricted by constraint , in order their ordinal position within the constraint key. Kind : instance property of Constraint Read only : true constraint.referencedColumnsBy : Map. Column For foreign key constraints, this is map of columns referenced by this constraint's columns. Keys are referencing column's names, values are referenced columns. Kind : instance property of Constraint Read only : true","title":"Constraint"},{"location":"api/Constraint/#constraint","text":"Class which represent a constraint. Provides attributes and methods for details of the constraint.","title":"Constraint"},{"location":"api/Constraint/#notes-for-through-constraints","text":"Through constraints are used for many to many relationships. Actually there isn't such a thing called many to many relationship or through constraint in the database engine. They are concepts to describe records which may be related more than one record on both sides. For example an invoice may contain more than product and a product may related to more than one invoice. Those relationships are solved a so called many to many join table . Constraint class supports many to many relationships. Since those constraints are not present in database engine, they are extracted by estimation/interpretation. Many non-join tables in a database could have more than one foreign key constraints, and they may not meant to be join tables, but they have still through relationships . Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Product table has 3 foreign key constraints. It is obvious that product table is not meant to be a many to many join table. However product could have been join table for size vendor , color vendor and size color . As a result size, color and vendor tables would have many to many through constraints . Kind : global class Constraint new Constraint(args) .name : string .fullName : string .fullCatalogName : string .type : contsraintType .comment : string .commentData : Object .description : string .descriptionData : Object .child : Table .table : Table .db : Db .schema : Schema .matchOption : string .onUpdate : constraintRule | null .onDelete : constraintRule | null .referencedTable : Table | null .parent : Table | null .columns : Map. Column .referencedColumnsBy : Map. Column","title":"Notes for Through Constraints "},{"location":"api/Constraint/#new-constraintargs","text":"Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Constraint instance to be created. args.parent Table For foreign key constraints this is Table instance this constraint refers to. If this is not a foreign key constraint this is null . args.table Table Table instance the Constraint is defined in. args.schemaName string Schema name of the Constraint. args.name string Name of the Constraint. args.type string Constraint type. args.description string Description of the constraint. args.descriptionData Object Extra data to store in object. args.onUpdate string Update rule of the constraint. args.onDelete string Delete rule of the constraint. args.matchOption string Match option of the constraint.","title":"new Constraint(args)"},{"location":"api/Constraint/#constraintname-string","text":"Name of the constraint. Kind : instance property of Constraint Read only : true","title":"constraint.name : string"},{"location":"api/Constraint/#constraintfullname-string","text":"Full name of the constraint with (.) notation. Kind : instance property of Constraint Read only : true Example var fullName = constraint.fullName; // crm.public","title":"constraint.fullName : string"},{"location":"api/Constraint/#constraintfullcatalogname-string","text":"Full name of the constraint with (.) notation including catalog name. Kind : instance property of Constraint Read only : true Example var fullCatalogName = constraint.fullCatalogName; // crm.public","title":"constraint.fullCatalogName : string"},{"location":"api/Constraint/#constrainttype-contsrainttype","text":"Constraint type. One of PRIMARY KEY , FOREIGN KEY or CHECK Kind : instance property of Constraint Read only : true","title":"constraint.type : contsraintType"},{"location":"api/Constraint/#constraintcomment-string","text":"Comment of the Constraint. Kind : instance property of Constraint Read only : true See : Aliases description","title":"constraint.comment : string"},{"location":"api/Constraint/#constraintcommentdata-object","text":"JS Object extracted from constraint description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Constraint Read only : true See : Aliases descriptionData Example let description = constraint.comment; // - 'This contraint refers contacts. [JSON]{ extraData : 2 }[/PGEN]' let extra = constraint.commentData; // - { extraData: 2 } console.log(constraint.commentData.extraData); // - 2","title":"constraint.commentData : Object"},{"location":"api/Constraint/#constraintdescription-string","text":"Comment of the Constraint. Kind : instance property of Constraint Read only : true See : Aliases comment","title":"constraint.description : string"},{"location":"api/Constraint/#constraintdescriptiondata-object","text":"JS Object extracted from constraint description. Object is expected as JSON data between [JSON] and [/JSON] tags in description. Tags are case-insensitive. Kind : instance property of Constraint Read only : true See : Aliases commentData Example let description = constraint.description; // - 'This contraint refers contacts. [JSON]{ extraData : 2 }[/PGEN]' let extra = constraint.descriptionData; // - { extraData: 2 } console.log(constraint.descriptionData.extraData); // - 2","title":"constraint.descriptionData : Object"},{"location":"api/Constraint/#constraintchild-table","text":"Child table of this constraint . Note for foreign key constraints: Child table is the table which contains foreign key. In example schema product is a child table (vendor_id FK) of vendor table. Kind : instance property of Constraint Read only : true Example var table = constraint.child;","title":"constraint.child : Table"},{"location":"api/Constraint/#constrainttable-table","text":"Table which this constraint belongs to or defined in. Note for foreign key constraints: As usual PostgreSQL defines foreign key constraints in child tables, where foreign key column is defined, so this is child table for foreign key constraints. Kind : instance property of Constraint Read only : true Example var table = constraint.table;","title":"constraint.table : Table"},{"location":"api/Constraint/#constraintdb-db","text":"Db this constraint belongs to. Kind : instance property of Constraint Read only : true","title":"constraint.db : Db"},{"location":"api/Constraint/#constraintschema-schema","text":"Schema this constraint belongs to. Kind : instance property of Constraint Read only : true","title":"constraint.schema : Schema"},{"location":"api/Constraint/#constraintmatchoption-string","text":"Match option of Constraint . Kind : instance property of Constraint Read only : true","title":"constraint.matchOption : string"},{"location":"api/Constraint/#constraintonupdate-constraintrule-124-null","text":"Update rule for foreign key constraints . One of CASCADE , SET NULL , SET DEFAULT , RESTRICT , NO ACTION If this is not a foreign key constraint this is null . Kind : instance property of Constraint Read only : true","title":"constraint.onUpdate : constraintRule | null"},{"location":"api/Constraint/#constraintondelete-constraintrule-124-null","text":"Update rule for foreign key constraints . One of CASCADE , SET NULL , SET DEFAULT , RESTRICT , NO ACTION If this is not a foreign key constraint this is null . Kind : instance property of Constraint Read only : true","title":"constraint.onDelete : constraintRule | null"},{"location":"api/Constraint/#constraintreferencedtable-table-124-null","text":"For foreign key constraints this is Table instance this constraint refers to. If this is not a foreign key constraint this is null . Kind : instance property of Constraint Read only : true See : Aliases parent","title":"constraint.referencedTable : Table | null"},{"location":"api/Constraint/#constraintparent-table-124-null","text":"For foreign key constraints this is Table instance this constraint refers to. If this is not a foreign key constraint this is null . Please Note: This is not the Table this constraint belongs to or defined in. Parent applies only to foreign key constraints and for foreign key constraints parent means referenced table not the table it is defined in. Kind : instance property of Constraint Read only : true See Aliases referencedTable To get Table this constraint belongs to or defined in, use table .","title":"constraint.parent : Table | null"},{"location":"api/Constraint/#constraintcolumns-mapcolumn","text":"For foreign key constraints, this is map of columns restricted by constraint , in order their ordinal position within the constraint key. Kind : instance property of Constraint Read only : true","title":"constraint.columns : Map.&lt;Column&gt;"},{"location":"api/Constraint/#constraintreferencedcolumnsby-mapcolumn","text":"For foreign key constraints, this is map of columns referenced by this constraint's columns. Keys are referencing column's names, values are referenced columns. Kind : instance property of Constraint Read only : true","title":"constraint.referencedColumnsBy : Map.&lt;Column&gt;"},{"location":"api/Db/","text":"Db Class which represent a database. Provides attributes and methods for details of the database. Kind : global class Db new Db(args, options) .name : string .fullName : string .fullCatalogName : string .options : Object .schemas : Map. Schema .get(path) \u21d2 Schema | Table | Column | undefined new Db(args, options) Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Default Description args Object Attributes of the Database instance to be created. args.name Object Name of the Db instance. options Object Options to modify behaviour of classes. [options.cache] boolean true Use cache to memoize calculated results. db.name : string Name of the Database . Kind : instance property of Db Read only : true db.fullName : string Full name of the Database with (.) notation. Since database does not have a parent this equals database name. Kind : instance property of Db Read only : true db.fullCatalogName : string Full name of the Database with (.) notation including catalog name. Since database does not have a parent this equals database name. Kind : instance property of Db Read only : true db.options : Object Options passed to during initialization. Kind : instance property of Db Read only : true db.schemas : Map. Schema All Schema instances in the database as a Map . Schemas are ordered by their name. Kind : instance property of Db Read only : true See : Map Example let isAvailable = db.schemas.has('another_schema'); let schemaNames = Array.from(db.schemas.keys()); // Use spread operator to get schema names as an array. let public = db.schemas.get('public'); let name = public.name; for (let schema of db.schemas.values()) { console.log(schema.name); } for (let [name, schema] of db.schemas) { console.log(name, schema.name); } db.get(path) \u21d2 Schema | Table | Column | undefined Returns Schema , Table or Column on given path relative to Db . Path should be in dot (.) notation. Kind : instance method of Db Returns : Schema | Table | Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var schema = db.get('public'), // Returns public schema. table = db.get('public.contact'), // Returns contact table in public schema. column = db.get('public.contact.name'); // Returns name column of the contact table in public schema.","title":"Db"},{"location":"api/Db/#db","text":"Class which represent a database. Provides attributes and methods for details of the database. Kind : global class Db new Db(args, options) .name : string .fullName : string .fullCatalogName : string .options : Object .schemas : Map. Schema .get(path) \u21d2 Schema | Table | Column | undefined","title":"Db"},{"location":"api/Db/#new-dbargs-options","text":"Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Default Description args Object Attributes of the Database instance to be created. args.name Object Name of the Db instance. options Object Options to modify behaviour of classes. [options.cache] boolean true Use cache to memoize calculated results.","title":"new Db(args, options)"},{"location":"api/Db/#dbname-string","text":"Name of the Database . Kind : instance property of Db Read only : true","title":"db.name : string"},{"location":"api/Db/#dbfullname-string","text":"Full name of the Database with (.) notation. Since database does not have a parent this equals database name. Kind : instance property of Db Read only : true","title":"db.fullName : string"},{"location":"api/Db/#dbfullcatalogname-string","text":"Full name of the Database with (.) notation including catalog name. Since database does not have a parent this equals database name. Kind : instance property of Db Read only : true","title":"db.fullCatalogName : string"},{"location":"api/Db/#dboptions-object","text":"Options passed to during initialization. Kind : instance property of Db Read only : true","title":"db.options : Object"},{"location":"api/Db/#dbschemas-mapschema","text":"All Schema instances in the database as a Map . Schemas are ordered by their name. Kind : instance property of Db Read only : true See : Map Example let isAvailable = db.schemas.has('another_schema'); let schemaNames = Array.from(db.schemas.keys()); // Use spread operator to get schema names as an array. let public = db.schemas.get('public'); let name = public.name; for (let schema of db.schemas.values()) { console.log(schema.name); } for (let [name, schema] of db.schemas) { console.log(name, schema.name); }","title":"db.schemas : Map.&lt;Schema&gt;"},{"location":"api/Db/#dbgetpath-schema-124-table-124-column-124-undefined","text":"Returns Schema , Table or Column on given path relative to Db . Path should be in dot (.) notation. Kind : instance method of Db Returns : Schema | Table | Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var schema = db.get('public'), // Returns public schema. table = db.get('public.contact'), // Returns contact table in public schema. column = db.get('public.contact.name'); // Returns name column of the contact table in public schema.","title":"db.get(path) \u21d2 Schema | Table | Column | undefined"},{"location":"api/Index/","text":"Index Class which represent a database index. Provides attributes and methods for details of the index. Kind : global class Index new Index(args) .name : string .fullName : string .fullCatalogName : string .isUnique : boolean .isPrimaryKey : boolean .table : Table .parent : Table .db : Db .schema : Schema .columns : Array. Column .columnsByName : Object. string, Column new Index(args) Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Index instance to be created. args.name string Name of the Index. args.isUnique string Is it a unique index. args.isPrimaryKey string Is it a primary key index. args.parent Table Parent Table of the Index. index.name : string Name of the index. Kind : instance property of Index Read only : true index.fullName : string Full name of the index with (.) notation. Kind : instance property of Index Read only : true Example var fullName = index.fullName; // crm.public index.fullCatalogName : string Full name of the index with (.) notation including catalog name. Kind : instance property of Index Read only : true Example var fullCatalogName = index.fullCatalogName; // crm.public index.isUnique : boolean If true, this is a unique index. Kind : instance property of Index Read only : true index.isPrimaryKey : boolean If true, this index represents the primary key of the table ( isUnique is always true for primary keys.) Kind : instance property of Index Read only : true index.table : Table Table which this index belongs to. Kind : instance property of Index Read only : true index.parent : Table Table which this index belongs to. Kind : instance property of Index Read only : true index.db : Db Db this index belongs to. Kind : instance property of Index Read only : true index.schema : Schema Schema this index belongs to. Kind : instance property of Index Read only : true index.columns : Array. Column List of columns restricted by index , in order their ordinal position within the index key. If index does not have any columns this is null . Kind : instance property of Index Read only : true index.columnsByName : Object. string, Column List of columns restricted by index , in order their ordinal position within the index key. If index does not have any columns this is null . Kind : instance property of Index Read only : true","title":"Index"},{"location":"api/Index/#index","text":"Class which represent a database index. Provides attributes and methods for details of the index. Kind : global class Index new Index(args) .name : string .fullName : string .fullCatalogName : string .isUnique : boolean .isPrimaryKey : boolean .table : Table .parent : Table .db : Db .schema : Schema .columns : Array. Column .columnsByName : Object. string, Column","title":"Index"},{"location":"api/Index/#new-indexargs","text":"Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Index instance to be created. args.name string Name of the Index. args.isUnique string Is it a unique index. args.isPrimaryKey string Is it a primary key index. args.parent Table Parent Table of the Index.","title":"new Index(args)"},{"location":"api/Index/#indexname-string","text":"Name of the index. Kind : instance property of Index Read only : true","title":"index.name : string"},{"location":"api/Index/#indexfullname-string","text":"Full name of the index with (.) notation. Kind : instance property of Index Read only : true Example var fullName = index.fullName; // crm.public","title":"index.fullName : string"},{"location":"api/Index/#indexfullcatalogname-string","text":"Full name of the index with (.) notation including catalog name. Kind : instance property of Index Read only : true Example var fullCatalogName = index.fullCatalogName; // crm.public","title":"index.fullCatalogName : string"},{"location":"api/Index/#indexisunique-boolean","text":"If true, this is a unique index. Kind : instance property of Index Read only : true","title":"index.isUnique : boolean"},{"location":"api/Index/#indexisprimarykey-boolean","text":"If true, this index represents the primary key of the table ( isUnique is always true for primary keys.) Kind : instance property of Index Read only : true","title":"index.isPrimaryKey : boolean"},{"location":"api/Index/#indextable-table","text":"Table which this index belongs to. Kind : instance property of Index Read only : true","title":"index.table : Table"},{"location":"api/Index/#indexparent-table","text":"Table which this index belongs to. Kind : instance property of Index Read only : true","title":"index.parent : Table"},{"location":"api/Index/#indexdb-db","text":"Db this index belongs to. Kind : instance property of Index Read only : true","title":"index.db : Db"},{"location":"api/Index/#indexschema-schema","text":"Schema this index belongs to. Kind : instance property of Index Read only : true","title":"index.schema : Schema"},{"location":"api/Index/#indexcolumns-arraycolumn","text":"List of columns restricted by index , in order their ordinal position within the index key. If index does not have any columns this is null . Kind : instance property of Index Read only : true","title":"index.columns : Array.&lt;Column&gt;"},{"location":"api/Index/#indexcolumnsbyname-objectstring-column","text":"List of columns restricted by index , in order their ordinal position within the index key. If index does not have any columns this is null . Kind : instance property of Index Read only : true","title":"index.columnsByName : Object.&lt;string, Column&gt;"},{"location":"api/M2MRelation/","text":"M2MRelation Kind : global class M2MRelation new M2MRelation(args) .type : relationType .sourceTable : Table .joinTable : Table .targetTable : Table .sourceConstraint : Table .targetConstraint : Table .generateName([strategy]) \u21d2 string new M2MRelation(args) Class which represent a many to many relationship which resembles belongsToMany or hasManyThrough relations in ORMs (Object Relational Mappers). Provides attributes and methods for details of the relationship. Actually there isn't such a thing called many to many relationship or through constraint in the database engine. They are concepts to describe records which may be related more than one record on both sides. For example an invoice may contain more than product and a product may related to more than one invoice. Those relationships are solved a so called many to many join table . Since those relations are not present in database engine, they are extracted by estimation/interpretation. Many non-join tables in a database could have more than one foreign key constraints, and they may not meant to be join tables, but they still appear to have through relationships. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Some definitions used in descriptions for M2MRelation . Source Table: Table which this relationship belongs to. Join Table: Table that contains common fields from two or more other tables. * Target Table: Table that is related to base table through a join table. Product table has 3 foreign key constraints. Product table is not meant to be a many to many join table. However product could have been join table for size vendor , color vendor and size color . As a result size, color and vendor tables would have many to many relationships. Param Type Description args Object Attributes of the M2MRelation instance to be created. args.sourceTable Table Source Table which this relation belongs to. args.joinTable Table Join Table of this relationship. args.targetTable Table Target Table which this relation is referring to through a join table. args.sourceConstraint Constraint Foreign key constraint between source table and join table. args.targetConstraint Constraint Foreign key constraint between join table and target table. Example // Example tables have single primary key and and examples first relation. So zero index ([0]) is used. Use all array elements if necessary. // product ---- line_item ---- cart // (source) (join) (target) let relation = product.m2mRelations[0]; // RELATION: product --- line_item --- cart let sourceConstraint = relation.sourceConstraint; // CONSTRAINT: ^-- product_has_carts let targetConstraint = relation.targetConstraint; // CONSTRAINT: cart_has_products --^ let sourceTable = relation.sourceTable; // TABLE: product let targetTable = relation.targetTable; // TABLE: cart let sourceJoinFKColumn = relation.sourceConstraint.columns[0]; // COLUMN: product_id (from line_item table) let targetJoinFKColumn = relation.targetConstraint.columns[0]; // COLUMN: cart_id (from line_item table) let sourcePKColumn = relation.sourceTable.primaryKeys[0]; // COLUMN: id (from product table) let targetPKColumn = relation.targetTable.primaryKeys[0]; // COLUMN: id (from cart table) m2MRelation.type : relationType Type of relation which is MANY TO MANY . Kind : instance property of M2MRelation Read only : true m2MRelation.sourceTable : Table Table which this relation belongs to. Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let source = relation.sourceTable; // TABLE: product m2MRelation.joinTable : Table Join Table of this relationship. This table contains foreign key columns referring both sourceTable and targetTable . Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let joinTable = relation.joinTable; // TABLE: line_item m2MRelation.targetTable : Table Table which this relation is referring to (Through a join table). Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let target = relation.targetTable; // TABLE: cart m2MRelation.sourceConstraint : Table Foreign key constraint between source table and join table . Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let sourceConstraint = relation.sourceConstraint; // CONSTRAINT: ^-- product_has_carts let sourceJoinFKColumn = relation.sourceConstraint.columns[0]; // COLUMN: product_id (from line_item table) m2MRelation.targetConstraint : Table Foreign key constraint between join table and target table . Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let targetConstraint = relation.targetConstraint; // CONSTRAINT: cart_has_products --^ let targetJoinFKColumn = relation.targetConstraint.columns[0]; // COLUMN: cart_id (from line_item table) m2MRelation.generateName([strategy]) \u21d2 string (! EXPERIMENTAL) Returns name for relation using given strategy. Please see Relation Names for details. Kind : instance method of M2MRelation Returns : string - - Relation name. See : Relation Names Param Type Description [strategy] string (simple, complex) Naming strategy to use.","title":"M2M Relation"},{"location":"api/M2MRelation/#m2mrelation","text":"Kind : global class M2MRelation new M2MRelation(args) .type : relationType .sourceTable : Table .joinTable : Table .targetTable : Table .sourceConstraint : Table .targetConstraint : Table .generateName([strategy]) \u21d2 string","title":"M2MRelation"},{"location":"api/M2MRelation/#new-m2mrelationargs","text":"Class which represent a many to many relationship which resembles belongsToMany or hasManyThrough relations in ORMs (Object Relational Mappers). Provides attributes and methods for details of the relationship. Actually there isn't such a thing called many to many relationship or through constraint in the database engine. They are concepts to describe records which may be related more than one record on both sides. For example an invoice may contain more than product and a product may related to more than one invoice. Those relationships are solved a so called many to many join table . Since those relations are not present in database engine, they are extracted by estimation/interpretation. Many non-join tables in a database could have more than one foreign key constraints, and they may not meant to be join tables, but they still appear to have through relationships. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Some definitions used in descriptions for M2MRelation . Source Table: Table which this relationship belongs to. Join Table: Table that contains common fields from two or more other tables. * Target Table: Table that is related to base table through a join table. Product table has 3 foreign key constraints. Product table is not meant to be a many to many join table. However product could have been join table for size vendor , color vendor and size color . As a result size, color and vendor tables would have many to many relationships. Param Type Description args Object Attributes of the M2MRelation instance to be created. args.sourceTable Table Source Table which this relation belongs to. args.joinTable Table Join Table of this relationship. args.targetTable Table Target Table which this relation is referring to through a join table. args.sourceConstraint Constraint Foreign key constraint between source table and join table. args.targetConstraint Constraint Foreign key constraint between join table and target table. Example // Example tables have single primary key and and examples first relation. So zero index ([0]) is used. Use all array elements if necessary. // product ---- line_item ---- cart // (source) (join) (target) let relation = product.m2mRelations[0]; // RELATION: product --- line_item --- cart let sourceConstraint = relation.sourceConstraint; // CONSTRAINT: ^-- product_has_carts let targetConstraint = relation.targetConstraint; // CONSTRAINT: cart_has_products --^ let sourceTable = relation.sourceTable; // TABLE: product let targetTable = relation.targetTable; // TABLE: cart let sourceJoinFKColumn = relation.sourceConstraint.columns[0]; // COLUMN: product_id (from line_item table) let targetJoinFKColumn = relation.targetConstraint.columns[0]; // COLUMN: cart_id (from line_item table) let sourcePKColumn = relation.sourceTable.primaryKeys[0]; // COLUMN: id (from product table) let targetPKColumn = relation.targetTable.primaryKeys[0]; // COLUMN: id (from cart table)","title":"new M2MRelation(args)"},{"location":"api/M2MRelation/#m2mrelationtype-relationtype","text":"Type of relation which is MANY TO MANY . Kind : instance property of M2MRelation Read only : true","title":"m2MRelation.type : relationType"},{"location":"api/M2MRelation/#m2mrelationsourcetable-table","text":"Table which this relation belongs to. Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let source = relation.sourceTable; // TABLE: product","title":"m2MRelation.sourceTable : Table"},{"location":"api/M2MRelation/#m2mrelationjointable-table","text":"Join Table of this relationship. This table contains foreign key columns referring both sourceTable and targetTable . Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let joinTable = relation.joinTable; // TABLE: line_item","title":"m2MRelation.joinTable : Table"},{"location":"api/M2MRelation/#m2mrelationtargettable-table","text":"Table which this relation is referring to (Through a join table). Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let target = relation.targetTable; // TABLE: cart","title":"m2MRelation.targetTable : Table"},{"location":"api/M2MRelation/#m2mrelationsourceconstraint-table","text":"Foreign key constraint between source table and join table . Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let sourceConstraint = relation.sourceConstraint; // CONSTRAINT: ^-- product_has_carts let sourceJoinFKColumn = relation.sourceConstraint.columns[0]; // COLUMN: product_id (from line_item table)","title":"m2MRelation.sourceConstraint : Table"},{"location":"api/M2MRelation/#m2mrelationtargetconstraint-table","text":"Foreign key constraint between join table and target table . Kind : instance property of M2MRelation Read only : true Example let relation = product.M2MRelationRelations[0]; // RELATION: product --- line_item --- cart let targetConstraint = relation.targetConstraint; // CONSTRAINT: cart_has_products --^ let targetJoinFKColumn = relation.targetConstraint.columns[0]; // COLUMN: cart_id (from line_item table)","title":"m2MRelation.targetConstraint : Table"},{"location":"api/M2MRelation/#m2mrelationgeneratenamestrategy-string","text":"(! EXPERIMENTAL) Returns name for relation using given strategy. Please see Relation Names for details. Kind : instance method of M2MRelation Returns : string - - Relation name. See : Relation Names Param Type Description [strategy] string (simple, complex) Naming strategy to use.","title":"m2MRelation.generateName([strategy]) \u21d2 string"},{"location":"api/M2ORelation/","text":"M2ORelation Kind : global class M2ORelation new M2ORelation(args) .type : relationType .sourceTable : Table .targetTable : Table .constraint : Table .generateName([strategy]) \u21d2 string new M2ORelation(args) Class which represent many to one relationship which resembles belongsTo relation in ORMs (Object Relational Mappers). Provides attributes and methods for details of the relationship. Actually there is no many to one relation in database engine. It is basically one to many relation in reverse direction. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Some definitions used in descriptions for M2ORelation . Source Table: Table which this relationship belongs to. Target Table: Table that is related to base table. Param Type Description args Object Attributes of the M2ORelation instance to be created. args.sourceTable Table Source Table which this relation belongs to. args.targetTable Table Target Table which this relation is referring to. args.constraint Constraint Foreign key constraint between source table and target table. args.namingStrategy string Naming strategy to be used. Example // Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary. // line_item ---- product // (source) (target) let relation = line_item.m2oRelations[0]; // RELATION: line_item ---- product let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let sourceTable = relation.sourceTable; // TABLE: line_item let targetTable = relation.targetTable; // TABLE: product let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table) let PKColumn = relation.targetTable.primaryKeys[0]; // COLUMN: id (from product table) m2ORelation.type : relationType Type of relation which is MANY TO ONE . Kind : instance property of M2ORelation Read only : true m2ORelation.sourceTable : Table Table which this relation belongs to. Kind : instance property of M2ORelation Read only : true Example let relation = product.M2ORelationRelations[0]; // RELATION: line_item ---- product let sourceTable = relation.sourceTable; // TABLE: line_item m2ORelation.targetTable : Table Table which this relation is referred by. Kind : instance property of M2ORelation Read only : true Example let relation = product.M2ORelationRelations[0]; // RELATION: line_item ---- product let targetTable = relation.targetTable; // TABLE: product m2ORelation.constraint : Table Foreign key constraint between source table and target table . Kind : instance property of M2ORelation Read only : true Example let relation = product.M2ORelationRelations[0]; // RELATION: line_item ---- product let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table) m2ORelation.generateName([strategy]) \u21d2 string (! EXPERIMENTAL) Returns name for relation using given strategy. Please see Relation Names for details. Kind : instance method of M2ORelation Returns : string - - Relation name. See : Relation Names Param Type Description [strategy] string (simple, complex) Naming strategy to use.","title":"M2O Relation"},{"location":"api/M2ORelation/#m2orelation","text":"Kind : global class M2ORelation new M2ORelation(args) .type : relationType .sourceTable : Table .targetTable : Table .constraint : Table .generateName([strategy]) \u21d2 string","title":"M2ORelation"},{"location":"api/M2ORelation/#new-m2orelationargs","text":"Class which represent many to one relationship which resembles belongsTo relation in ORMs (Object Relational Mappers). Provides attributes and methods for details of the relationship. Actually there is no many to one relation in database engine. It is basically one to many relation in reverse direction. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Some definitions used in descriptions for M2ORelation . Source Table: Table which this relationship belongs to. Target Table: Table that is related to base table. Param Type Description args Object Attributes of the M2ORelation instance to be created. args.sourceTable Table Source Table which this relation belongs to. args.targetTable Table Target Table which this relation is referring to. args.constraint Constraint Foreign key constraint between source table and target table. args.namingStrategy string Naming strategy to be used. Example // Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary. // line_item ---- product // (source) (target) let relation = line_item.m2oRelations[0]; // RELATION: line_item ---- product let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let sourceTable = relation.sourceTable; // TABLE: line_item let targetTable = relation.targetTable; // TABLE: product let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table) let PKColumn = relation.targetTable.primaryKeys[0]; // COLUMN: id (from product table)","title":"new M2ORelation(args)"},{"location":"api/M2ORelation/#m2orelationtype-relationtype","text":"Type of relation which is MANY TO ONE . Kind : instance property of M2ORelation Read only : true","title":"m2ORelation.type : relationType"},{"location":"api/M2ORelation/#m2orelationsourcetable-table","text":"Table which this relation belongs to. Kind : instance property of M2ORelation Read only : true Example let relation = product.M2ORelationRelations[0]; // RELATION: line_item ---- product let sourceTable = relation.sourceTable; // TABLE: line_item","title":"m2ORelation.sourceTable : Table"},{"location":"api/M2ORelation/#m2orelationtargettable-table","text":"Table which this relation is referred by. Kind : instance property of M2ORelation Read only : true Example let relation = product.M2ORelationRelations[0]; // RELATION: line_item ---- product let targetTable = relation.targetTable; // TABLE: product","title":"m2ORelation.targetTable : Table"},{"location":"api/M2ORelation/#m2orelationconstraint-table","text":"Foreign key constraint between source table and target table . Kind : instance property of M2ORelation Read only : true Example let relation = product.M2ORelationRelations[0]; // RELATION: line_item ---- product let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table)","title":"m2ORelation.constraint : Table"},{"location":"api/M2ORelation/#m2orelationgeneratenamestrategy-string","text":"(! EXPERIMENTAL) Returns name for relation using given strategy. Please see Relation Names for details. Kind : instance method of M2ORelation Returns : string - - Relation name. See : Relation Names Param Type Description [strategy] string (simple, complex) Naming strategy to use.","title":"m2ORelation.generateName([strategy]) \u21d2 string"},{"location":"api/Map/","text":"Map The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value. Kind : global class See : Mozilla Map Documentation Map .size : number .array : Array .entries() \u21d2 Iterator .forEach(callbackFn, this) .get(name) \u21d2 * .has(name) \u21d2 boolean .keys() \u21d2 Iterator .values() \u21d2 Iterator map.size : number The number of key/value pairs in the Map object. Kind : instance property of Map Example let size = db.get('public.account').columns.size; map.array : Array Not part of Map standard. Values of Map as an array. Kind : instance property of Map Example let schemasArray = db.schemas.array; map.entries() \u21d2 Iterator Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order. Kind : instance method of Map Example let column = db.get('public.account').columns.get('name'); map.forEach(callbackFn, this) Calls callbackFn once for each key-value pair present in the Map object, in insertion order. If a thisArg parameter is provided to forEach, it will be used as the this value for each callback. Kind : instance method of Map Param Type Description callbackFn function Function to call for each pair. this Object Context. map.get(name) \u21d2 * Returns the value associated to the key, or undefined if there is none. Kind : instance method of Map Returns : * - - Value associated to key. Param Type Description name string Name of the item to get. Example let column = db.get('public.account').columns.get('name'); map.has(name) \u21d2 boolean Returns a boolean asserting whether a value has been associated to the key in the Map object or not. Kind : instance method of Map Returns : boolean - - true if key exists. Param Type Description name string Name of the item to test. Example let exists = db.schemas.has('public'); // true map.keys() \u21d2 Iterator Returns a new Iterator object that contains the keys for each element in the Map object in insertion order. Kind : instance method of Map Example for (let tableName of db.schemas.get('public').tables.keys()) { console.log(tableName); } let tableNames = Array.from(db.schemas.get('public').tables.keys()); // Table names as an array. map.values() \u21d2 Iterator Returns a new Iterator object that contains the values for each element in the Map object in insertion order. Kind : instance method of Map Example for (let table of db.schemas.get('public').tables.values()) { console.log(table.name); } let tables = Array.from(db.schemas.get('public').tables.values()); // Table objects as an array.","title":"Map"},{"location":"api/Map/#map","text":"The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value. Kind : global class See : Mozilla Map Documentation Map .size : number .array : Array .entries() \u21d2 Iterator .forEach(callbackFn, this) .get(name) \u21d2 * .has(name) \u21d2 boolean .keys() \u21d2 Iterator .values() \u21d2 Iterator","title":"Map"},{"location":"api/Map/#mapsize-number","text":"The number of key/value pairs in the Map object. Kind : instance property of Map Example let size = db.get('public.account').columns.size;","title":"map.size : number"},{"location":"api/Map/#maparray-array","text":"Not part of Map standard. Values of Map as an array. Kind : instance property of Map Example let schemasArray = db.schemas.array;","title":"map.array : Array"},{"location":"api/Map/#mapentries-iterator","text":"Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order. Kind : instance method of Map Example let column = db.get('public.account').columns.get('name');","title":"map.entries() \u21d2 Iterator"},{"location":"api/Map/#mapforeachcallbackfn-this","text":"Calls callbackFn once for each key-value pair present in the Map object, in insertion order. If a thisArg parameter is provided to forEach, it will be used as the this value for each callback. Kind : instance method of Map Param Type Description callbackFn function Function to call for each pair. this Object Context.","title":"map.forEach(callbackFn, this)"},{"location":"api/Map/#mapgetname-42","text":"Returns the value associated to the key, or undefined if there is none. Kind : instance method of Map Returns : * - - Value associated to key. Param Type Description name string Name of the item to get. Example let column = db.get('public.account').columns.get('name');","title":"map.get(name) \u21d2 *"},{"location":"api/Map/#maphasname-boolean","text":"Returns a boolean asserting whether a value has been associated to the key in the Map object or not. Kind : instance method of Map Returns : boolean - - true if key exists. Param Type Description name string Name of the item to test. Example let exists = db.schemas.has('public'); // true","title":"map.has(name) \u21d2 boolean"},{"location":"api/Map/#mapkeys-iterator","text":"Returns a new Iterator object that contains the keys for each element in the Map object in insertion order. Kind : instance method of Map Example for (let tableName of db.schemas.get('public').tables.keys()) { console.log(tableName); } let tableNames = Array.from(db.schemas.get('public').tables.keys()); // Table names as an array.","title":"map.keys() \u21d2 Iterator"},{"location":"api/Map/#mapvalues-iterator","text":"Returns a new Iterator object that contains the values for each element in the Map object in insertion order. Kind : instance method of Map Example for (let table of db.schemas.get('public').tables.values()) { console.log(table.name); } let tables = Array.from(db.schemas.get('public').tables.values()); // Table objects as an array.","title":"map.values() \u21d2 Iterator"},{"location":"api/O2MRelation/","text":"O2MRelation Kind : global class O2MRelation new O2MRelation(args) .type : relationType .sourceTable : Table .targetTable : Table .constraint : Table .generateName([strategy]) \u21d2 string new O2MRelation(args) Class which represent one to many relationship which resembles hasMany relation in ORMs (Object Relational Mappers). Provides attributes and methods for details of the relationship. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Some definitions used in descriptions for O2MRelation . Source Table: Table which this relationship belongs to. Target Table: Table that is related to base table. Param Type Description args Object Attributes of the O2MRelation instance to be created. args.sourceTable Table Source Table which this relation belongs to. args.targetTable Table Target Table which this relation is referring to. args.constraint Constraint Foreign key constraint between source table and target table. Example // Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary. // product ---- line_item // (source) (target) let relation = product.o2mRelations[0]; // RELATION: product --- line_item let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let sourceTable = relation.sourceTable; // TABLE: product let targetTable = relation.targetTable; // TABLE: line_item let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table) let sourcePKColumn = relation.sourceTable.primaryKeys[0]; // COLUMN: id (from product table) o2MRelation.type : relationType Type of relation which is ONE TO MANY . Kind : instance property of O2MRelation Read only : true o2MRelation.sourceTable : Table Table which this relation belongs to. Kind : instance property of O2MRelation Read only : true Example let relation = product.O2MRelationRelations[0]; // RELATION: product --- line_item let sourceTable = relation.sourceTable; // TABLE: product o2MRelation.targetTable : Table Table which this relation is referring to. Kind : instance property of O2MRelation Read only : true Example let relation = product.O2MRelationRelations[0]; // RELATION: product --- line_item let targetTable = relation.targetTable; // TABLE: line_item o2MRelation.constraint : Table Foreign key constraint between source table and target table . Kind : instance property of O2MRelation Read only : true Example let relation = product.O2MRelationRelations[0]; // RELATION: product --- line_item let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table) o2MRelation.generateName([strategy]) \u21d2 string (! EXPERIMENTAL) Returns name for relation using given strategy. Please see Relation Names for details. Kind : instance method of O2MRelation Returns : string - - Relation name. See : Relation Names Param Type Description [strategy] string (simple, complex) Naming strategy to use.","title":"O2M Relation"},{"location":"api/O2MRelation/#o2mrelation","text":"Kind : global class O2MRelation new O2MRelation(args) .type : relationType .sourceTable : Table .targetTable : Table .constraint : Table .generateName([strategy]) \u21d2 string","title":"O2MRelation"},{"location":"api/O2MRelation/#new-o2mrelationargs","text":"Class which represent one to many relationship which resembles hasMany relation in ORMs (Object Relational Mappers). Provides attributes and methods for details of the relationship. Below is a database schema as an example: size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Some definitions used in descriptions for O2MRelation . Source Table: Table which this relationship belongs to. Target Table: Table that is related to base table. Param Type Description args Object Attributes of the O2MRelation instance to be created. args.sourceTable Table Source Table which this relation belongs to. args.targetTable Table Target Table which this relation is referring to. args.constraint Constraint Foreign key constraint between source table and target table. Example // Example tables have single primary key and examples first relation. So zero index ([0]) is used. Use all array elements if necessary. // product ---- line_item // (source) (target) let relation = product.o2mRelations[0]; // RELATION: product --- line_item let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let sourceTable = relation.sourceTable; // TABLE: product let targetTable = relation.targetTable; // TABLE: line_item let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table) let sourcePKColumn = relation.sourceTable.primaryKeys[0]; // COLUMN: id (from product table)","title":"new O2MRelation(args)"},{"location":"api/O2MRelation/#o2mrelationtype-relationtype","text":"Type of relation which is ONE TO MANY . Kind : instance property of O2MRelation Read only : true","title":"o2MRelation.type : relationType"},{"location":"api/O2MRelation/#o2mrelationsourcetable-table","text":"Table which this relation belongs to. Kind : instance property of O2MRelation Read only : true Example let relation = product.O2MRelationRelations[0]; // RELATION: product --- line_item let sourceTable = relation.sourceTable; // TABLE: product","title":"o2MRelation.sourceTable : Table"},{"location":"api/O2MRelation/#o2mrelationtargettable-table","text":"Table which this relation is referring to. Kind : instance property of O2MRelation Read only : true Example let relation = product.O2MRelationRelations[0]; // RELATION: product --- line_item let targetTable = relation.targetTable; // TABLE: line_item","title":"o2MRelation.targetTable : Table"},{"location":"api/O2MRelation/#o2mrelationconstraint-table","text":"Foreign key constraint between source table and target table . Kind : instance property of O2MRelation Read only : true Example let relation = product.O2MRelationRelations[0]; // RELATION: product --- line_item let constraint = relation.constraint; // CONSTRAINT: ^-- product_has_carts let FKColumn = relation.constraint.columns[0]; // COLUMN: product_id (from line_item table)","title":"o2MRelation.constraint : Table"},{"location":"api/O2MRelation/#o2mrelationgeneratenamestrategy-string","text":"(! EXPERIMENTAL) Returns name for relation using given strategy. Please see Relation Names for details. Kind : instance method of O2MRelation Returns : string - - Relation name. See : Relation Names Param Type Description [strategy] string (simple, complex) Naming strategy to use.","title":"o2MRelation.generateName([strategy]) \u21d2 string"},{"location":"api/PgStructure/","text":"pgStructure pgStructure module.exports(pgOptions, [schemas], options) \u21d2 Promise. Db \u23cf static .save(file, db) \u21d2 Promise. string .load(file) \u21d2 Promise. (Db|undefined) .serialize(db) \u21d2 string .toString(db) \u21d2 string .deserialize(serializedDbJSON) \u21d2 Db | undefined .parse(serializedDb) \u21d2 Db | undefined inner ~pgOptions : Object module.exports(pgOptions, [schemas], options) \u21d2 Promise. Db \u23cf Creates and returns Db instance by reverse engineering PostgreSQL database. Kind : Exported function Returns : Promise. Db - - Db . Throws : Error - Throws if one of the requested shchemas does not exists on database. Param Type Default Description pgOptions pgOptions | pg#client node-postgres client or connection parameters. Parameters passed directly to node-postgres. See it for details. [schemas] string | Array. string [ public ] PostgreSQL schemas to be parsed. options Object pg-structure options. [options.cache] boolean true Use cache to memoize calculated results. Example var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password'}, ['public', 'other_schema']) .then((db) = { console.log( db.get('public.account').columns[0].name ); }) .catch(err = console.log(err.stack)); module.exports.save(file, db) \u21d2 Promise. string Saves given database structure to a disk file. If given file name ends with .zip extension, file will be saved as compressed zip file. Kind : static method of module.exports Returns : Promise. string - - Serialized string. Param Type Description file string | undefined File path to save database structure. db Db Db object to save. Example var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then(db = pgStructure.save('./db.json', db)) .catch(err = console.log(err.stack)); module.exports.load(file) \u21d2 Promise. (Db|undefined) Loads database structure from previously saved file. Much faster than getting structure from database. If file is a zip file which contains a json file with same name as zip file, this function decompresses the file automatically. pgStructure cannot load files saved by incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database and create a new save file. Kind : static method of module.exports Returns : Promise. (Db|undefined) - - Db instance or undefined if saved file is generated with incompatible module version. Param Type Description file string File path to load db structure from. Example var pgStructure = require('pg-structure'); pgStructure.load('./db.json') .then(db = console.log(db.schemas[0].name)) .catch(err = console.log(err.stack)); module.exports.serialize(db) \u21d2 string Serializes database structure to make it possible to store or transfer. Kind : static method of module.exports Returns : string - - Serialized database structure. Param Type Description db Db Db instance to serialize. Example pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then(db = pgStructure.serialize(db)) .then(data = console.log(data)) .catch(err = console.log(err.stack)); module.exports.toString(db) \u21d2 string Alias of {@link module:pgStructure.serialize). Serializes database structure to make it possible to store or transfer. Kind : static method of module.exports Returns : string - - Serialized database structure. See : {@link module:pgStructure.serialize) Param Type Description db Db Db instance to serialize. module.exports.deserialize(serializedDbJSON) \u21d2 Db | undefined Creates and returns Db instance using previously serialized string. pgStructure cannot deserialize incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database. Kind : static method of module.exports Returns : Db | undefined - - Db instance. If serialized string is from incompatible module version, this is undefined var pgStructure = require('pg-structure'); pgStructure.deserialize('./db.json') .then(db = console.log(db.schemas[0].name) .catch(err = console.log(err.stack)); Param Type Description serializedDbJSON string Serialized database structure to create Db instance from. module.exports.parse(serializedDb) \u21d2 Db | undefined Alias of deserialize . Creates and returns Db instance using previously serialized string. pgStructure cannot deserialize incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database. Kind : static method of module.exports Returns : Db | undefined - - Db instance. If serialized string is from incompatible module version, this is undefined See : deserialize Param Type Description serializedDb string Serialized database structure to create Db instance from. module.exports~pgOptions : Object PostgreSQL connection options which are passed directly to node-postgres. Kind : inner typedef of module.exports Properties Name Type Default Description database string Database name [host] string localhost Hostname of the database. [port] number 5432 Port of the database. [user] string Username for connecting to db. [password] string Password to connecting to db. [ssl] boolean | Object false Pass the same options as tls.connect().","title":"pgStructure"},{"location":"api/PgStructure/#pgstructure","text":"pgStructure module.exports(pgOptions, [schemas], options) \u21d2 Promise. Db \u23cf static .save(file, db) \u21d2 Promise. string .load(file) \u21d2 Promise. (Db|undefined) .serialize(db) \u21d2 string .toString(db) \u21d2 string .deserialize(serializedDbJSON) \u21d2 Db | undefined .parse(serializedDb) \u21d2 Db | undefined inner ~pgOptions : Object","title":"pgStructure"},{"location":"api/PgStructure/#moduleexportspgoptions-schemas-options-promisedb","text":"Creates and returns Db instance by reverse engineering PostgreSQL database. Kind : Exported function Returns : Promise. Db - - Db . Throws : Error - Throws if one of the requested shchemas does not exists on database. Param Type Default Description pgOptions pgOptions | pg#client node-postgres client or connection parameters. Parameters passed directly to node-postgres. See it for details. [schemas] string | Array. string [ public ] PostgreSQL schemas to be parsed. options Object pg-structure options. [options.cache] boolean true Use cache to memoize calculated results. Example var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password'}, ['public', 'other_schema']) .then((db) = { console.log( db.get('public.account').columns[0].name ); }) .catch(err = console.log(err.stack));","title":"module.exports(pgOptions, [schemas], options) \u21d2 Promise.&lt;Db&gt; \u23cf"},{"location":"api/PgStructure/#moduleexportssavefile-db-promisestring","text":"Saves given database structure to a disk file. If given file name ends with .zip extension, file will be saved as compressed zip file. Kind : static method of module.exports Returns : Promise. string - - Serialized string. Param Type Description file string | undefined File path to save database structure. db Db Db object to save. Example var pgStructure = require('pg-structure'); pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then(db = pgStructure.save('./db.json', db)) .catch(err = console.log(err.stack));","title":"module.exports.save(file, db) \u21d2 Promise.&lt;string&gt;"},{"location":"api/PgStructure/#moduleexportsloadfile-promisedb124undefined","text":"Loads database structure from previously saved file. Much faster than getting structure from database. If file is a zip file which contains a json file with same name as zip file, this function decompresses the file automatically. pgStructure cannot load files saved by incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database and create a new save file. Kind : static method of module.exports Returns : Promise. (Db|undefined) - - Db instance or undefined if saved file is generated with incompatible module version. Param Type Description file string File path to load db structure from. Example var pgStructure = require('pg-structure'); pgStructure.load('./db.json') .then(db = console.log(db.schemas[0].name)) .catch(err = console.log(err.stack));","title":"module.exports.load(file) \u21d2 Promise.&lt;(Db|undefined)&gt;"},{"location":"api/PgStructure/#moduleexportsserializedb-string","text":"Serializes database structure to make it possible to store or transfer. Kind : static method of module.exports Returns : string - - Serialized database structure. Param Type Description db Db Db instance to serialize. Example pgStructure({database: 'db', user: 'user', password: 'password', host: 'localhost', port: 5432}, ['public', 'other_schema']) .then(db = pgStructure.serialize(db)) .then(data = console.log(data)) .catch(err = console.log(err.stack));","title":"module.exports.serialize(db) \u21d2 string"},{"location":"api/PgStructure/#moduleexportstostringdb-string","text":"Alias of {@link module:pgStructure.serialize). Serializes database structure to make it possible to store or transfer. Kind : static method of module.exports Returns : string - - Serialized database structure. See : {@link module:pgStructure.serialize) Param Type Description db Db Db instance to serialize.","title":"module.exports.toString(db) \u21d2 string"},{"location":"api/PgStructure/#moduleexportsdeserializeserializeddbjson-db-124-undefined","text":"Creates and returns Db instance using previously serialized string. pgStructure cannot deserialize incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database. Kind : static method of module.exports Returns : Db | undefined - - Db instance. If serialized string is from incompatible module version, this is undefined var pgStructure = require('pg-structure'); pgStructure.deserialize('./db.json') .then(db = console.log(db.schemas[0].name) .catch(err = console.log(err.stack)); Param Type Description serializedDbJSON string Serialized database structure to create Db instance from.","title":"module.exports.deserialize(serializedDbJSON) \u21d2 Db | undefined"},{"location":"api/PgStructure/#moduleexportsparseserializeddb-db-124-undefined","text":"Alias of deserialize . Creates and returns Db instance using previously serialized string. pgStructure cannot deserialize incompatible pg-structure module versions and returns undefined . In this case you should fetch structure from database. Kind : static method of module.exports Returns : Db | undefined - - Db instance. If serialized string is from incompatible module version, this is undefined See : deserialize Param Type Description serializedDb string Serialized database structure to create Db instance from.","title":"module.exports.parse(serializedDb) \u21d2 Db | undefined"},{"location":"api/PgStructure/#moduleexportspgoptions-object","text":"PostgreSQL connection options which are passed directly to node-postgres. Kind : inner typedef of module.exports Properties Name Type Default Description database string Database name [host] string localhost Hostname of the database. [port] number 5432 Port of the database. [user] string Username for connecting to db. [password] string Password to connecting to db. [ssl] boolean | Object false Pass the same options as tls.connect().","title":"module.exports~pgOptions : Object"},{"location":"api/Schema/","text":"Schema Class which represent a PostgreSQL schema. Provides attributes and methods for details of the database. Kind : global class Schema new Schema(args) .name : string .fullName : string .fullCatalogName : string .db : Db .parent : Db .comment : string .description : string .tables : Map. Table .types : Map. Type .get(path) \u21d2 Table | Column | undefined new Schema(args) Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Schema instance to be created. args.parent Db Parent Db of the Schema. args.name string Name of the Schema. args.description string Description of the Schema. schema.name : string Name of the schema. Kind : instance property of Schema Read only : true schema.fullName : string Full name of the Schema . For schema it is equal to schema name. Kind : instance property of Schema Read only : true Example var fullName = schema.fullName; // public schema.fullCatalogName : string Full name of the Schema with (.) notation including catalog name. Kind : instance property of Schema Read only : true Example var fullCatalogName = schema.fullCatalogName; // crm.public schema.db : Db Db this schema belongs to. Kind : instance property of Schema Read only : true See : Aliases parent Example var db = schema.db; // Db instance schema.parent : Db Db this schema belongs to. Kind : instance property of Schema Read only : true See : Aliases db Example var db = schema.parent; // Db instance schema.comment : string Comment of the schema. Kind : instance property of Schema Read only : true See : Aliases description schema.description : string Comment of the schema. Kind : instance property of Schema Read only : true See : Aliases comment schema.tables : Map. Table All Table instances of the schema as a Map . They are ordered by their name. Kind : instance property of Schema Read only : true See : Map Example let isAvailable = schema.tables.has('person'); let tableNames = Array.from(schema.tables.keys()); // Use spread operator to get table names as an array. let table = schema.tables.get('account'); let name = table.name; for (let table of schema.tables.values()) { console.log(table.name); } for (let [name, table] of schema.tables) { console.log(name, table.name); } schema.types : Map. Type All Type instances of the schema as a Map . They are ordered by their name. Kind : instance property of Schema Read only : true See : Map Example let isAvailable = schema.types.has('address'); let typeNames = Array.from(schema.types.keys()); // Use spread operator to get table names as an array. let type = schema.types.get('address'); let columns = type.columns; schema.get(path) \u21d2 Table | Column | undefined Returns Table or Column on given path relative to Schema . Path should be in dot (.) notation. Kind : instance method of Schema Returns : Table | Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var table = db.get('contact'), // Returns contact table in public schema. column = db.get('contact.name'); // Returns name column of the contact table.","title":"Schema"},{"location":"api/Schema/#schema","text":"Class which represent a PostgreSQL schema. Provides attributes and methods for details of the database. Kind : global class Schema new Schema(args) .name : string .fullName : string .fullCatalogName : string .db : Db .parent : Db .comment : string .description : string .tables : Map. Table .types : Map. Type .get(path) \u21d2 Table | Column | undefined","title":"Schema"},{"location":"api/Schema/#new-schemaargs","text":"Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Schema instance to be created. args.parent Db Parent Db of the Schema. args.name string Name of the Schema. args.description string Description of the Schema.","title":"new Schema(args)"},{"location":"api/Schema/#schemaname-string","text":"Name of the schema. Kind : instance property of Schema Read only : true","title":"schema.name : string"},{"location":"api/Schema/#schemafullname-string","text":"Full name of the Schema . For schema it is equal to schema name. Kind : instance property of Schema Read only : true Example var fullName = schema.fullName; // public","title":"schema.fullName : string"},{"location":"api/Schema/#schemafullcatalogname-string","text":"Full name of the Schema with (.) notation including catalog name. Kind : instance property of Schema Read only : true Example var fullCatalogName = schema.fullCatalogName; // crm.public","title":"schema.fullCatalogName : string"},{"location":"api/Schema/#schemadb-db","text":"Db this schema belongs to. Kind : instance property of Schema Read only : true See : Aliases parent Example var db = schema.db; // Db instance","title":"schema.db : Db"},{"location":"api/Schema/#schemaparent-db","text":"Db this schema belongs to. Kind : instance property of Schema Read only : true See : Aliases db Example var db = schema.parent; // Db instance","title":"schema.parent : Db"},{"location":"api/Schema/#schemacomment-string","text":"Comment of the schema. Kind : instance property of Schema Read only : true See : Aliases description","title":"schema.comment : string"},{"location":"api/Schema/#schemadescription-string","text":"Comment of the schema. Kind : instance property of Schema Read only : true See : Aliases comment","title":"schema.description : string"},{"location":"api/Schema/#schematables-maptable","text":"All Table instances of the schema as a Map . They are ordered by their name. Kind : instance property of Schema Read only : true See : Map Example let isAvailable = schema.tables.has('person'); let tableNames = Array.from(schema.tables.keys()); // Use spread operator to get table names as an array. let table = schema.tables.get('account'); let name = table.name; for (let table of schema.tables.values()) { console.log(table.name); } for (let [name, table] of schema.tables) { console.log(name, table.name); }","title":"schema.tables : Map.&lt;Table&gt;"},{"location":"api/Schema/#schematypes-maptype","text":"All Type instances of the schema as a Map . They are ordered by their name. Kind : instance property of Schema Read only : true See : Map Example let isAvailable = schema.types.has('address'); let typeNames = Array.from(schema.types.keys()); // Use spread operator to get table names as an array. let type = schema.types.get('address'); let columns = type.columns;","title":"schema.types : Map.&lt;Type&gt;"},{"location":"api/Schema/#schemagetpath-table-124-column-124-undefined","text":"Returns Table or Column on given path relative to Schema . Path should be in dot (.) notation. Kind : instance method of Schema Returns : Table | Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var table = db.get('contact'), // Returns contact table in public schema. column = db.get('contact.name'); // Returns name column of the contact table.","title":"schema.get(path) \u21d2 Table | Column | undefined"},{"location":"api/Table/","text":"Table Class which represent a table. Provides attributes and methods for details of the table. Tables have relationships with other tables. Below is a database schema which is used in code examples. size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Kind : global class Table new Table(args) .name : string .fullName : string .fullCatalogName : string .schema : Schema .parent : Schema .comment : string .commentData : Object .description : string .descriptionData : Object .kind : string .columns : Map. Column .constraints : Map. Constraint .db : Db .foreignKeyConstraints : Map. Constraint .foreignKeyColumns : Map. Column .foreignKeyConstraintsToThis : Map. Constraint .primaryKeyConstraint : Constraint | undefined .primaryKeyColumns : Map. Column .hasManyTables : Map. Table .belongsToTables : Map. Table .belongsToManyTables : Map. Table .belongsToManyTablesPk : Map. Table .m2mRelations : Set. M2MRelation .m2mRelationsPk : Set. M2MRelation .o2mRelations : Set. O2MRelation .m2oRelations : Set. M2ORelation .relations : Array. (O2MRelation|M2ORelation|M2MRelation) .get(path) \u21d2 Column | undefined new Table(args) Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Table instance to be created. args.parent Schema Parent Schema of the Table. args.name string Name of the Table. args.description string Description of the Table. args.descriptionData Object Extra data to store in object. args.kind string Kind of table. ( table or view ) table.name : string Name of the table. Kind : instance property of Table Read only : true table.fullName : string Full name of the Table with (.) notation. Kind : instance property of Table Read only : true Example var fullName = table.fullName; // public.account table.fullCatalogName : string Full name of the Table with (.) notation including catalog name. Kind : instance property of Table Read only : true Example var fullName = table.fullName; // crm.public.account table.schema : Schema Schema this table belongs to. Kind : instance property of Table Read only : true See : Aliases parent Example var schema = table.schema; // Schema instance table.parent : Schema Schema this table belongs to. Kind : instance property of Table Read only : true See : Aliases schema Example var schema = table.parent; // Schema instance table.comment : string Comment of the table. Kind : instance property of Table Read only : true See : Aliases description table.commentData : Object JS Object extracted from table description. Object is expected as JSON data between [PG-STRUCTURE] and [/PG-STRUCTURE] tags in description. Tags are case-insensitive. For maximum comfort JSON parsing is made by jsonic . It is a non-strict JSON parser. It is possible to ommit quotes etc. Please see jsonic for details. Kind : instance property of Table Read only : true See : Aliases descriptionData Example let description = table.comment; // - 'This table holds account details. [PG-STRUCTURE]{ extraData: 2 }[/PGEN]' let extra = table.commentData; // - { extraData: 2 } console.log(table.commentData.extraData); // - 2 table.description : string Comment of the table. Kind : instance property of Table Read only : true See : Aliases comment table.descriptionData : Object JS Object extracted from table description. Object is expected as JSON data between [PG-STRUCTURE] and [/PG-STRUCTURE] tags in description. Tags are case-insensitive. For maximum comfort JSON parsing is made by jsonic . It is a non-strict JSON parser. It is possible to ommit quotes etc. You don't need to quote property names: { foo:\"bar baz\", red:255 } You don't need the top level braces: foo:\"bar baz\", red:255 You don't need to quote strings with spaces: foo:bar baz, red:255 You do need to quote strings if they contain a comma or closing brace or square bracket: icky:\",}]\" You can use single quotes for strings: Jules:'Cry \"Havoc,\" and let slip the dogs of war!' You can have trailing commas: foo:bar, red:255, For details, please see jsonic . Kind : instance property of Table Read only : true See : Aliases commentData Example let description = table.description; // - 'This table holds account details. [PG-STRUCTURE]{ extraData : 2 }[/PGEN]' let extra = table.descriptionData; // - { extraData: 2 } console.log(table.descriptionData.extraData); // - 2 table.kind : string Kind of table. One of the values of table or view . Kind : instance property of Table Read only : true table.columns : Map. Column All Column instances in the table as a Map . They are ordered same order as they are defined in database table. Kind : instance property of Table Read only : true See : Map Example var isAvailable = table.columns.has('id'); var columnNames = Array.from(schema.columns.keys()); // Use spread operator to get column names as an array. var column = table.columns.get('user_id'); var name = column.name; for (let column of table.columns.values()) { console.log(column.name); } for (let [name, column] of table.columns) { console.log(name, column.name); } table.constraints : Map. Constraint All Constraint instances in the table as a Map . They are ordered by name. Kind : instance property of Table Read only : true table.db : Db Db this table belongs to. Kind : instance property of Table Read only : true table.foreignKeyConstraints : Map. Constraint All Constraint instances which are foreign key constraints in the table as a Map . Kind : instance property of Table Read only : true See : o2mRelations , m2oRelations , m2mRelations to get more details about relations. table.foreignKeyColumns : Map. Column All foreign key columns of all foreignKeyConstraints as a Map . Foreign key constraints may contain more than one column. To get foreign key columns of a specific foreign key constraint use foreignKeyConstraints . columns Kind : instance property of Table Read only : true table.foreignKeyConstraintsToThis : Map. Constraint All foreign key Constraint instances which are referring to this table as a Map . Kind : instance property of Table Read only : true See : o2mRelations , m2oRelations , m2mRelations to get more details about relations. table.primaryKeyConstraint : Constraint | undefined Primary key constraint instance of this table. Kind : instance property of Table Read only : true See : primaryKeyColumns to get primary key columns directly. Example let pkConstraint = table.primaryKeyConstraint; let pkColumns = Array.from(pkConstraint.columns.values()); // As an array for (let [name, column] of pkConstraint.columns) { console.log(column.name); } table.primaryKeyColumns : Map. Column Primary key columns of this table as a Map . Kind : instance property of Table Read only : true See : primaryKeyConstraint to get primary key constraint. Example let pkColumns = Array.from(table.primaryKeyColumns.values()); // As an array for (let [name, column] of pkConstraint.columns) { console.log(column.name); } table.hasManyTables : Map. Table Tables sorted by name, which this table has relationship of type one to many . Kind : instance property of Table Read only : true See : Example schema , Map Example for (let [name, table] of vendorTable.hasManyTables) { console.log(table.name); } table.belongsToTables : Map. Table Tables sorted by name, which this table has relationship of type belongs to which is reverse direction of one to many . Kind : instance property of Table Read only : true See : Example schema , Map Example for (let [name, table] of productTable.belongsToTables) { console.log(table.name); } table.belongsToManyTables : Map. Table Tables sorted by name, which this table has relationship of type many to many . Kind : instance property of Table Read only : true See : Example schema , Map Example // Cart (id) has many products (id) through line_item join table. for (let [name, table] of cartTable.belongsToManyTables) { console.log(table.name); } table.belongsToManyTablesPk : Map. Table Tables sorted by name, which this table has relationship of type many to many . Includes only tables joined by primary keys in join table. Kind : instance property of Table Read only : true See : Example schema , Map Example // Cart (id) has many products (id) through line_item join table. for (let [name, table] of cartTable.belongsToManyTables) { console.log(table.name); } table.m2mRelations : Set. M2MRelation Set of many to many relationships of the table. M2MRelation resembles has many through and belongs to many relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true table.m2mRelationsPk : Set. M2MRelation Set of many to many relationships of the table. Different from m2mRelations this only includes relations joined by Primary Foreign Keys in join table. Primary Foreign Keys means foreign keys of join table which are also Primary Keys of join table at the same time. M2MRelation resembles has many through and belongs to many relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true table.o2mRelations : Set. O2MRelation Set of one to many relationships of the table. O2MRelation resembles has many relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true table.m2oRelations : Set. M2ORelation Set of many to one relationships of the table. M2ORelation resembles belongs to relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true table.relations : Array. (O2MRelation|M2ORelation|M2MRelation) List of all relationships of the table. Kind : instance property of Table Read only : true table.get(path) \u21d2 Column | undefined Returns Column on given path relative to Table . Kind : instance method of Table Returns : Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var column = table.get('contact'), // Returns contact column in public table.","title":"Table"},{"location":"api/Table/#table","text":"Class which represent a table. Provides attributes and methods for details of the table. Tables have relationships with other tables. Below is a database schema which is used in code examples. size ------------------- id (PK) | --------------------------- line_item ------------ cart name | | product_id (PFK) id (PK) | | cart_id (PFK) name ^ | color ------------- product ------------- vendor id (PK) id (PK) id (PK) name name name color_id (FK) size_id (FK) vendor_id (FK) Below is the same schema as image: Kind : global class Table new Table(args) .name : string .fullName : string .fullCatalogName : string .schema : Schema .parent : Schema .comment : string .commentData : Object .description : string .descriptionData : Object .kind : string .columns : Map. Column .constraints : Map. Constraint .db : Db .foreignKeyConstraints : Map. Constraint .foreignKeyColumns : Map. Column .foreignKeyConstraintsToThis : Map. Constraint .primaryKeyConstraint : Constraint | undefined .primaryKeyColumns : Map. Column .hasManyTables : Map. Table .belongsToTables : Map. Table .belongsToManyTables : Map. Table .belongsToManyTablesPk : Map. Table .m2mRelations : Set. M2MRelation .m2mRelationsPk : Set. M2MRelation .o2mRelations : Set. O2MRelation .m2oRelations : Set. M2ORelation .relations : Array. (O2MRelation|M2ORelation|M2MRelation) .get(path) \u21d2 Column | undefined","title":"Table"},{"location":"api/Table/#new-tableargs","text":"Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Table instance to be created. args.parent Schema Parent Schema of the Table. args.name string Name of the Table. args.description string Description of the Table. args.descriptionData Object Extra data to store in object. args.kind string Kind of table. ( table or view )","title":"new Table(args)"},{"location":"api/Table/#tablename-string","text":"Name of the table. Kind : instance property of Table Read only : true","title":"table.name : string"},{"location":"api/Table/#tablefullname-string","text":"Full name of the Table with (.) notation. Kind : instance property of Table Read only : true Example var fullName = table.fullName; // public.account","title":"table.fullName : string"},{"location":"api/Table/#tablefullcatalogname-string","text":"Full name of the Table with (.) notation including catalog name. Kind : instance property of Table Read only : true Example var fullName = table.fullName; // crm.public.account","title":"table.fullCatalogName : string"},{"location":"api/Table/#tableschema-schema","text":"Schema this table belongs to. Kind : instance property of Table Read only : true See : Aliases parent Example var schema = table.schema; // Schema instance","title":"table.schema : Schema"},{"location":"api/Table/#tableparent-schema","text":"Schema this table belongs to. Kind : instance property of Table Read only : true See : Aliases schema Example var schema = table.parent; // Schema instance","title":"table.parent : Schema"},{"location":"api/Table/#tablecomment-string","text":"Comment of the table. Kind : instance property of Table Read only : true See : Aliases description","title":"table.comment : string"},{"location":"api/Table/#tablecommentdata-object","text":"JS Object extracted from table description. Object is expected as JSON data between [PG-STRUCTURE] and [/PG-STRUCTURE] tags in description. Tags are case-insensitive. For maximum comfort JSON parsing is made by jsonic . It is a non-strict JSON parser. It is possible to ommit quotes etc. Please see jsonic for details. Kind : instance property of Table Read only : true See : Aliases descriptionData Example let description = table.comment; // - 'This table holds account details. [PG-STRUCTURE]{ extraData: 2 }[/PGEN]' let extra = table.commentData; // - { extraData: 2 } console.log(table.commentData.extraData); // - 2","title":"table.commentData : Object"},{"location":"api/Table/#tabledescription-string","text":"Comment of the table. Kind : instance property of Table Read only : true See : Aliases comment","title":"table.description : string"},{"location":"api/Table/#tabledescriptiondata-object","text":"JS Object extracted from table description. Object is expected as JSON data between [PG-STRUCTURE] and [/PG-STRUCTURE] tags in description. Tags are case-insensitive. For maximum comfort JSON parsing is made by jsonic . It is a non-strict JSON parser. It is possible to ommit quotes etc. You don't need to quote property names: { foo:\"bar baz\", red:255 } You don't need the top level braces: foo:\"bar baz\", red:255 You don't need to quote strings with spaces: foo:bar baz, red:255 You do need to quote strings if they contain a comma or closing brace or square bracket: icky:\",}]\" You can use single quotes for strings: Jules:'Cry \"Havoc,\" and let slip the dogs of war!' You can have trailing commas: foo:bar, red:255, For details, please see jsonic . Kind : instance property of Table Read only : true See : Aliases commentData Example let description = table.description; // - 'This table holds account details. [PG-STRUCTURE]{ extraData : 2 }[/PGEN]' let extra = table.descriptionData; // - { extraData: 2 } console.log(table.descriptionData.extraData); // - 2","title":"table.descriptionData : Object"},{"location":"api/Table/#tablekind-string","text":"Kind of table. One of the values of table or view . Kind : instance property of Table Read only : true","title":"table.kind : string"},{"location":"api/Table/#tablecolumns-mapcolumn","text":"All Column instances in the table as a Map . They are ordered same order as they are defined in database table. Kind : instance property of Table Read only : true See : Map Example var isAvailable = table.columns.has('id'); var columnNames = Array.from(schema.columns.keys()); // Use spread operator to get column names as an array. var column = table.columns.get('user_id'); var name = column.name; for (let column of table.columns.values()) { console.log(column.name); } for (let [name, column] of table.columns) { console.log(name, column.name); }","title":"table.columns : Map.&lt;Column&gt;"},{"location":"api/Table/#tableconstraints-mapconstraint","text":"All Constraint instances in the table as a Map . They are ordered by name. Kind : instance property of Table Read only : true","title":"table.constraints : Map.&lt;Constraint&gt;"},{"location":"api/Table/#tabledb-db","text":"Db this table belongs to. Kind : instance property of Table Read only : true","title":"table.db : Db"},{"location":"api/Table/#tableforeignkeyconstraints-mapconstraint","text":"All Constraint instances which are foreign key constraints in the table as a Map . Kind : instance property of Table Read only : true See : o2mRelations , m2oRelations , m2mRelations to get more details about relations.","title":"table.foreignKeyConstraints : Map.&lt;Constraint&gt;"},{"location":"api/Table/#tableforeignkeycolumns-mapcolumn","text":"All foreign key columns of all foreignKeyConstraints as a Map . Foreign key constraints may contain more than one column. To get foreign key columns of a specific foreign key constraint use foreignKeyConstraints . columns Kind : instance property of Table Read only : true","title":"table.foreignKeyColumns : Map.&lt;Column&gt;"},{"location":"api/Table/#tableforeignkeyconstraintstothis-mapconstraint","text":"All foreign key Constraint instances which are referring to this table as a Map . Kind : instance property of Table Read only : true See : o2mRelations , m2oRelations , m2mRelations to get more details about relations.","title":"table.foreignKeyConstraintsToThis : Map.&lt;Constraint&gt;"},{"location":"api/Table/#tableprimarykeyconstraint-constraint-124-undefined","text":"Primary key constraint instance of this table. Kind : instance property of Table Read only : true See : primaryKeyColumns to get primary key columns directly. Example let pkConstraint = table.primaryKeyConstraint; let pkColumns = Array.from(pkConstraint.columns.values()); // As an array for (let [name, column] of pkConstraint.columns) { console.log(column.name); }","title":"table.primaryKeyConstraint : Constraint | undefined"},{"location":"api/Table/#tableprimarykeycolumns-mapcolumn","text":"Primary key columns of this table as a Map . Kind : instance property of Table Read only : true See : primaryKeyConstraint to get primary key constraint. Example let pkColumns = Array.from(table.primaryKeyColumns.values()); // As an array for (let [name, column] of pkConstraint.columns) { console.log(column.name); }","title":"table.primaryKeyColumns : Map.&lt;Column&gt;"},{"location":"api/Table/#tablehasmanytables-maptable","text":"Tables sorted by name, which this table has relationship of type one to many . Kind : instance property of Table Read only : true See : Example schema , Map Example for (let [name, table] of vendorTable.hasManyTables) { console.log(table.name); }","title":"table.hasManyTables : Map.&lt;Table&gt;"},{"location":"api/Table/#tablebelongstotables-maptable","text":"Tables sorted by name, which this table has relationship of type belongs to which is reverse direction of one to many . Kind : instance property of Table Read only : true See : Example schema , Map Example for (let [name, table] of productTable.belongsToTables) { console.log(table.name); }","title":"table.belongsToTables : Map.&lt;Table&gt;"},{"location":"api/Table/#tablebelongstomanytables-maptable","text":"Tables sorted by name, which this table has relationship of type many to many . Kind : instance property of Table Read only : true See : Example schema , Map Example // Cart (id) has many products (id) through line_item join table. for (let [name, table] of cartTable.belongsToManyTables) { console.log(table.name); }","title":"table.belongsToManyTables : Map.&lt;Table&gt;"},{"location":"api/Table/#tablebelongstomanytablespk-maptable","text":"Tables sorted by name, which this table has relationship of type many to many . Includes only tables joined by primary keys in join table. Kind : instance property of Table Read only : true See : Example schema , Map Example // Cart (id) has many products (id) through line_item join table. for (let [name, table] of cartTable.belongsToManyTables) { console.log(table.name); }","title":"table.belongsToManyTablesPk : Map.&lt;Table&gt;"},{"location":"api/Table/#tablem2mrelations-setm2mrelation","text":"Set of many to many relationships of the table. M2MRelation resembles has many through and belongs to many relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true","title":"table.m2mRelations : Set.&lt;M2MRelation&gt;"},{"location":"api/Table/#tablem2mrelationspk-setm2mrelation","text":"Set of many to many relationships of the table. Different from m2mRelations this only includes relations joined by Primary Foreign Keys in join table. Primary Foreign Keys means foreign keys of join table which are also Primary Keys of join table at the same time. M2MRelation resembles has many through and belongs to many relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true","title":"table.m2mRelationsPk : Set.&lt;M2MRelation&gt;"},{"location":"api/Table/#tableo2mrelations-seto2mrelation","text":"Set of one to many relationships of the table. O2MRelation resembles has many relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true","title":"table.o2mRelations : Set.&lt;O2MRelation&gt;"},{"location":"api/Table/#tablem2orelations-setm2orelation","text":"Set of many to one relationships of the table. M2ORelation resembles belongs to relations in ORMs. It has some useful methods and information for generating ORM classes. Kind : instance property of Table Read only : true","title":"table.m2oRelations : Set.&lt;M2ORelation&gt;"},{"location":"api/Table/#tablerelations-arrayo2mrelation124m2orelation124m2mrelation","text":"List of all relationships of the table. Kind : instance property of Table Read only : true","title":"table.relations : Array.&lt;(O2MRelation|M2ORelation|M2MRelation)&gt;"},{"location":"api/Table/#tablegetpath-column-124-undefined","text":"Returns Column on given path relative to Table . Kind : instance method of Table Returns : Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var column = table.get('contact'), // Returns contact column in public table.","title":"table.get(path) \u21d2 Column | undefined"},{"location":"api/Type/","text":"Type Class which represent a custom PostgreSQL type. Provides attributes and methods for details of the type. Kind : global class Type new Type(args) .name : string .fullName : string .fullCatalogName : string .schema : Schema .parent : Db .db : Db .comment : string .description : string .columns : Map. Column .get(path) \u21d2 Column | undefined new Type(args) Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Type instance to be created. args.parent Schema Parent Schema of the Type. args.name string Name of the Type. args.description string Description of the Type. type.name : string Name of the type. Kind : instance property of Type Read only : true type.fullName : string Full name of the Type . Kind : instance property of Type Read only : true Example var fullName = type.fullName; // public type.fullCatalogName : string Full name of the Type with (.) notation including catalog name. Kind : instance property of Type Read only : true Example var fullCatalogName = schema.fullCatalogName; // crm.public type.schema : Schema Schema this type belongs to. Kind : instance property of Type Read only : true See : Aliases parent Example var schema = type.schema; // Schema instance type.parent : Db Db this schema belongs to. Kind : instance property of Type Read only : true See : Aliases schema Example var db = type.parent; // Schema instance type.db : Db Db this type belongs to. Kind : instance property of Type Read only : true type.comment : string Comment of the type. Kind : instance property of Type Read only : true See : Aliases description type.description : string Comment of the schema. Kind : instance property of Type Read only : true See : Aliases comment type.columns : Map. Column All Column instances in the type as a Map . They are ordered same order as they are defined in database type. Kind : instance property of Type Read only : true See : Map Example var isAvailable = type.columns.has('foo'); var column = type.columns.get('user_id'); var name = column.name; for (let column of type.columns.values()) { console.log(column.name); } for (let [name, column] of type.columns) { console.log(name, column.name); } type.get(path) \u21d2 Column | undefined Returns Column on given path relative to Type . Kind : instance method of Type Returns : Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var column = type.get('contact'), // Returns contact column of the type.","title":"Type"},{"location":"api/Type/#type","text":"Class which represent a custom PostgreSQL type. Provides attributes and methods for details of the type. Kind : global class Type new Type(args) .name : string .fullName : string .fullCatalogName : string .schema : Schema .parent : Db .db : Db .comment : string .description : string .columns : Map. Column .get(path) \u21d2 Column | undefined","title":"Type"},{"location":"api/Type/#new-typeargs","text":"Constructor function. You don't need to call constructor manually. pg-structure handles this. Param Type Description args Object Attributes of the Type instance to be created. args.parent Schema Parent Schema of the Type. args.name string Name of the Type. args.description string Description of the Type.","title":"new Type(args)"},{"location":"api/Type/#typename-string","text":"Name of the type. Kind : instance property of Type Read only : true","title":"type.name : string"},{"location":"api/Type/#typefullname-string","text":"Full name of the Type . Kind : instance property of Type Read only : true Example var fullName = type.fullName; // public","title":"type.fullName : string"},{"location":"api/Type/#typefullcatalogname-string","text":"Full name of the Type with (.) notation including catalog name. Kind : instance property of Type Read only : true Example var fullCatalogName = schema.fullCatalogName; // crm.public","title":"type.fullCatalogName : string"},{"location":"api/Type/#typeschema-schema","text":"Schema this type belongs to. Kind : instance property of Type Read only : true See : Aliases parent Example var schema = type.schema; // Schema instance","title":"type.schema : Schema"},{"location":"api/Type/#typeparent-db","text":"Db this schema belongs to. Kind : instance property of Type Read only : true See : Aliases schema Example var db = type.parent; // Schema instance","title":"type.parent : Db"},{"location":"api/Type/#typedb-db","text":"Db this type belongs to. Kind : instance property of Type Read only : true","title":"type.db : Db"},{"location":"api/Type/#typecomment-string","text":"Comment of the type. Kind : instance property of Type Read only : true See : Aliases description","title":"type.comment : string"},{"location":"api/Type/#typedescription-string","text":"Comment of the schema. Kind : instance property of Type Read only : true See : Aliases comment","title":"type.description : string"},{"location":"api/Type/#typecolumns-mapcolumn","text":"All Column instances in the type as a Map . They are ordered same order as they are defined in database type. Kind : instance property of Type Read only : true See : Map Example var isAvailable = type.columns.has('foo'); var column = type.columns.get('user_id'); var name = column.name; for (let column of type.columns.values()) { console.log(column.name); } for (let [name, column] of type.columns) { console.log(name, column.name); }","title":"type.columns : Map.&lt;Column&gt;"},{"location":"api/Type/#typegetpath-column-124-undefined","text":"Returns Column on given path relative to Type . Kind : instance method of Type Returns : Column | undefined - - Requested item. Param Type Description path string Path of the requested item in dot (.) notation such as 'public.contact' Example var column = type.get('contact'), // Returns contact column of the type.","title":"type.get(path) \u21d2 Column | undefined"}]}